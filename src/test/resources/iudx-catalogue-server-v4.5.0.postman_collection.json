{
	"info": {
		"_postman_id": "bfc694ed-a70b-4c5d-b01f-c21b7d762139",
		"name": "iudx-catalogue-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23234057"
	},
	"item": [
		{
			"name": "Get Token",
			"item": [
				{
					"name": "Get CONSUMER token for accessing an Open Resource Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"openToken\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"openToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"cat-test.iudx.io\",\n  \"itemType\": \"resource_server\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DELEGATE token for uploading a Resource Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"token\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"token\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerClientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{providerClientSecret}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/cat-test.iudx.io/catalogue/crud\", \n  \"itemType\": \"resource\",\n  \"role\": \"provider\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ADMIN token for uploading a Resource/Resource Group Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"adminToken\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"adminToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"cat-test.iudx.io\", \n  \"itemType\": \"resource_server\",\n  \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD APIs",
			"item": [
				{
					"name": "Create Item",
					"item": [
						{
							"name": "200 (success) - Create an DX Resource Item Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\");\r",
											"    const ID = resultsjsonData.id;\r",
											"    pm.globals.set(\"item_id\",ID);\r",
											"    const Name = ID.substring(ID.lastIndexOf('/')+1);\r",
											"    const providerID = ID.substring(0, ID.indexOf(\"/\", ID.indexOf(\"/\") + 1));\r",
											"    pm.globals.set(\"provider_id\", providerID);\r",
											"    pm.globals.set(\"item_name\", Name);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"@context\": \"https://voc.iudx.org.in/\",\r\n        \"type\": [\r\n            \"iudx:Resource\",\r\n            \"iudx:EnvAQM\"\r\n        ],\r\n        \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2\",\r\n        \"description\": \"Description for pune Point of interest\",\r\n        \"tags\": [\r\n            \"environment\",\r\n            \" air quality\",\r\n            \" climate\",\r\n            \" air\",\r\n            \" aqi\",\r\n            \" aqm\",\r\n            \" climo\",\r\n            \" pollution\",\r\n            \" so2\",\r\n            \" co2\",\r\n            \" co\",\r\n            \" no\",\r\n            \" no2\",\r\n            \" pm2.5\",\r\n            \" pm10\",\r\n            \" humidity\",\r\n            \" temperature\",\r\n            \" ozone\",\r\n            \" o3\",\r\n            \" noise\",\r\n            \" light\",\r\n            \" uv\"\r\n        ],\r\n        \"provider\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f\",\r\n        \"itemStatus\": \"ACTIVE\",\r\n        \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n        \"resourceGroup\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests\",\r\n        \"location\": {\r\n            \"type\": \"Place\",\r\n            \"address\": \"ABD area, Pune\",\r\n            \"geometry\": {\r\n                \"coordinates\": [\r\n                    73.874537,\r\n                    18.528311\r\n                ],\r\n                \"type\": \"Point\"\r\n            }\r\n        },\r\n        \"deviceModel\": {\r\n            \"brandName\": \"Climo\",\r\n            \"modelName\": \"Bosch-Climo\",\r\n            \"modelURL\": \"http://boschclimo.com\"\r\n        },\r\n        \"name\": \"ppoi_2\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid schema)- Create DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"@context\": \"https://voc.iudx.org.in/\",\r\n        \"type\": [\r\n            \"iudx:Resource\",\r\n            \"iudx:EnvAQM\"\r\n        ],\r\n        \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n        \"description\": \"Description for Bosch-Climo AQM resource\",\r\n        \"tags\": [\r\n            \"environment\",\r\n            \" air quality\",\r\n            \" climate\",\r\n            \" air\",\r\n            \" aqi\",\r\n            \" aqm\",\r\n            \" climo\",\r\n            \" pollution\",\r\n            \" so2\",\r\n            \" co2\",\r\n            \" co\",\r\n            \" no\",\r\n            \" no2\",\r\n            \" pm2.5\",\r\n            \" pm10\",\r\n            \" humidity\",\r\n            \" temperature\",\r\n            \" ozone\",\r\n            \" o3\",\r\n            \" noise\",\r\n            \" light\",\r\n            \" uv\"\r\n        ],\r\n        \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n        \"itemStatus\": \"ACTIVE\",\r\n        \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n        \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n        \"location\": {\r\n            \"type\": \"Place\",\r\n            \"address\": \"ABD area, Pune\",\r\n            \"geometry\": {\r\n                \"coordinates\": [\r\n                    73.874537,\r\n                    18.528311\r\n                ],\r\n                \"type\": \"Point\"\r\n            }\r\n        },\r\n        \"deviceModel\": {\r\n            \"brandName\": \"Climo\",\r\n            \"modelName\": \"Bosch-Climo\",\r\n            \"modelURL\": \"http://boschclimo.com\"\r\n        },\r\n        \"name\": \"iudx.uttar.pradesh.vanarasi.org/f7e044eee8122b5c87dce6e7ad64f3266044eee8122b5c87dce6e7adafa41dc/vanarasi.resourceserver.iudx.io/aqm--pollution-aqm-pm-co2-bosch-climo/aqm_test_2aqm_test_2 environment  air quality  climate  air  aqi  aqm  climo  pollution  so2  co2  co  no  no2  pm2.5  pm10  humidity temperature  ozone  o3  noise  light  uv Description for Bosch-Climo AQM resource aqm_test_2aqm_test_2 environment  air quality  climate  air  aqi  aqm  climo  pollution  so2  co2  co  no  no2  pm2.5  pm10  humidity  temperature  ozone  o3  noise  light  uv Description for Bosch-Climo AQM resource\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid links) - Create an DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:LinkValidationFailed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"@context\": \"https://voc.iudx.org.in/\",\r\n        \"type\": [\r\n            \"iudx:Resource\",\r\n            \"iudx:EnvAQM\"\r\n        ],\r\n        \"id\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n        \"description\": \"Description for Bosch-Climo AQM resource\",\r\n        \"tags\": [\r\n            \"environment\",\r\n            \" air quality\",\r\n            \" climate\",\r\n            \" air\",\r\n            \" aqi\",\r\n            \" aqm\",\r\n            \" climo\",\r\n            \" pollution\",\r\n            \" so2\",\r\n            \" co2\",\r\n            \" co\",\r\n            \" no\",\r\n            \" no2\",\r\n            \" pm2.5\",\r\n            \" pm10\",\r\n            \" humidity\",\r\n            \" temperature\",\r\n            \" ozone\",\r\n            \" o3\",\r\n            \" noise\",\r\n            \" light\",\r\n            \" uv\"\r\n        ],\r\n        \"provider\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f\",\r\n        \"itemStatus\": \"ACTIVE\",\r\n        \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n        \"resourceGroup\": \"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/aqm-bosch-climo\",\r\n        \"location\": {\r\n            \"type\": \"Place\",\r\n            \"address\": \"ABD area, Pune\",\r\n            \"geometry\": {\r\n                \"coordinates\": [\r\n                    73.874537,\r\n                    18.528311\r\n                ],\r\n                \"type\": \"Point\"\r\n            }\r\n        },\r\n        \"deviceModel\": {\r\n            \"brandName\": \"Climo\",\r\n            \"modelName\": \"Bosch-Climo\",\r\n            \"modelURL\": \"http://boschclimo.com\"\r\n        },\r\n        \"name\": \"PuneRailwayStation_28\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (invalid jwt credentials) - Create an DX Entity (JWT Token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"pune-env-flood-abc\",\r\n    \"description\": \"Flood level sensors in Pune city.\",\r\n    \"label\": \"Pune Flood Sensors\",\r\n    \"location\": {\r\n        \"address\": \"Pune, Maharashtra\",\r\n        \"type\": \"Place\"\r\n    },\r\n    \"itemStatus\": \"ACTIVE\",\r\n    \"dataSampleFile\": \"https://file.iudx.org.in/iudx/v1/download?file-id=datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-flood/sample.json\",\r\n    \"resourceServer\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io\",\r\n    \"dataDescriptor\": {\r\n        \"dataDescriptorLabel\": \"Data Descriptor for flood-level sensor data in Pune city\",\r\n        \"currentLevel\": {\r\n            \"unitText\": \"meter\",\r\n            \"description\": \"Current flooding level indicated by the sensing station corresponding to this observation, computed using referenceLevel and measuredDistance(currentLevel = referenceLevel - measuredDistance).\",\r\n            \"unitCode\": \"MTR\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:Number\"\r\n        },\r\n        \"description\": \"Data Descriptor for flood sensor data.\",\r\n        \"type\": [\r\n            \"iudx:DataDescriptor\",\r\n            \"iudx:EnvFlood\"\r\n        ],\r\n        \"measuredDistance\": {\r\n            \"unitText\": \"meter\",\r\n            \"description\": \"The distance measured by the sensor, from the sensor tip to the upper surface of water.\",\r\n            \"unitCode\": \"MTR\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:Number\"\r\n        },\r\n        \"observationDateTime\": {\r\n            \"description\": \"Last reported time of observation.\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:DateTime\"\r\n        },\r\n        \"referenceLevel\": {\r\n            \"unitText\": \"meter\",\r\n            \"description\": \"Reference setting used to compute the currentLevel.\",\r\n            \"unitCode\": \"MTR\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:Number\"\r\n        },\r\n        \"@context\": \"https://voc.iudx.org.in/\"\r\n    },\r\n    \"type\": [\r\n        \"iudx:ResourceGroup\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"dataSample\": {\r\n        \"measuredDistance\": 3.22,\r\n        \"currentLevel\": 0.98,\r\n        \"observationDateTime\": \"2020-09-16T13:30:00+05:30\",\r\n        \"referenceLevel\": 4.2\r\n    },\r\n    \"provider\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86\",\r\n    \"accessPolicy\": \"OPEN\",\r\n    \"resourceType\": \"MESSAGESTREAM\",\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"river\",\r\n        \"river bed\"\r\n    ],\r\n    \"iudxResourceAPIs\": [\r\n        \"ATTR\",\r\n        \"TEMPORAL\"\r\n    ],\r\n    \"instance\": \"pune\",\r\n    \"itemCreatedAt\": \"2021-07-05T12:06:28+0530\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Item",
					"item": [
						{
							"name": "200 (success) - Update an DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:Resource\",\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"{{item_id}}\",\r\n  \"name\": \"{{item_name}}\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource 28\",\r\n  \"tags\": [\r\n    \"New Tag, aqm,flood.test\"\r\n  ],\r\n  \"provider\": \"{{provider_id}}\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"{{provider_id}}/rs.iudx.io/pune-point-of-interests\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid schema) - Update an DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"name\": \"Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource 2\",\r\n  \"tags\": [\r\n    \"New Tag, aqm,flood\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid links) - Update an DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:LinkValidationFailed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"@context\": \"https://voc.iudx.org.in/\",\r\n        \"type\": [\r\n            \"iudx:Resource\",\r\n            \"iudx:EnvAQM\"\r\n        ],\r\n        \"id\": \"{{item_id}}\",\r\n        \"description\": \"Description for Bosch-Climo AQM resource\",\r\n        \"tags\": [\r\n            \"environment\",\r\n            \" air quality\"\r\n        ],\r\n        \"provider\": \"{{provider_id}}\",\r\n        \"itemStatus\": \"ACTIVE\",\r\n        \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n        \"resourceGroup\": \"{{provider_id}}/rs.iudx.io/aqm-bosch-climo\",\r\n        \"location\": {\r\n            \"type\": \"Place\",\r\n            \"address\": \"ABD area, Pune\",\r\n            \"geometry\": {\r\n                \"coordinates\": [\r\n                    73.874537,\r\n                    18.528311\r\n                ],\r\n                \"type\": \"Point\"\r\n            }\r\n        },\r\n        \"name\": \"PuneRailwayStation_28\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (invalid jwt credentials) - Update an DX Entity (JWT Token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"pune-env-flood-abc\",\r\n    \"description\": \"Flood level sensors in Pune city.\",\r\n    \"label\": \"Pune Flood Sensors\",\r\n    \"location\": {\r\n        \"address\": \"Pune, Maharashtra\",\r\n        \"type\": \"Place\"\r\n    },\r\n    \"itemStatus\": \"ACTIVE\",\r\n    \"dataSampleFile\": \"https://file.iudx.org.in/iudx/v1/download?file-id=datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.org.in/pune-env-flood/sample.json\",\r\n    \"resourceServer\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io\",\r\n    \"dataDescriptor\": {\r\n        \"dataDescriptorLabel\": \"Data Descriptor for flood-level sensor data in Pune city\",\r\n        \"currentLevel\": {\r\n            \"unitText\": \"meter\",\r\n            \"description\": \"Current flooding level indicated by the sensing station corresponding to this observation, computed using referenceLevel and measuredDistance(currentLevel = referenceLevel - measuredDistance).\",\r\n            \"unitCode\": \"MTR\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:Number\"\r\n        },\r\n        \"description\": \"Data Descriptor for flood sensor data.\",\r\n        \"type\": [\r\n            \"iudx:DataDescriptor\",\r\n            \"iudx:EnvFlood\"\r\n        ],\r\n        \"measuredDistance\": {\r\n            \"unitText\": \"meter\",\r\n            \"description\": \"The distance measured by the sensor, from the sensor tip to the upper surface of water.\",\r\n            \"unitCode\": \"MTR\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:Number\"\r\n        },\r\n        \"observationDateTime\": {\r\n            \"description\": \"Last reported time of observation.\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:DateTime\"\r\n        },\r\n        \"referenceLevel\": {\r\n            \"unitText\": \"meter\",\r\n            \"description\": \"Reference setting used to compute the currentLevel.\",\r\n            \"unitCode\": \"MTR\",\r\n            \"type\": [\r\n                \"ValueDescriptor\"\r\n            ],\r\n            \"dataSchema\": \"iudx:Number\"\r\n        },\r\n        \"@context\": \"https://voc.iudx.org.in/\"\r\n    },\r\n    \"type\": [\r\n        \"iudx:ResourceGroup\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"dataSample\": {\r\n        \"measuredDistance\": 4.22,\r\n        \"currentLevel\": 0.98,\r\n        \"observationDateTime\": \"2020-09-16T13:30:00+05:30\",\r\n        \"referenceLevel\": 4.2\r\n    },\r\n    \"provider\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86\",\r\n    \"accessPolicy\": \"OPEN\",\r\n    \"resourceType\": \"MESSAGESTREAM\",\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"river\",\r\n        \"river bed\"\r\n    ],\r\n    \"iudxResourceAPIs\": [\r\n        \"ATTR\",\r\n        \"TEMPORAL\"\r\n    ],\r\n    \"instance\": \"pune\",\r\n    \"itemCreatedAt\": \"2021-07-05T12:06:28+0530\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Item",
					"item": [
						{
							"name": "200 (success) - Delete an DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id={{item_id}}",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "{{item_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Delete an DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:ItemNotFound\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id={{item_id}}",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "{{item_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (invalid jtw credentials) - Delete an DX Entity (JWT TOKEN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidAuthorizationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood-abc",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood-abc"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get/List Item",
					"item": [
						{
							"name": "200 (success) - Get DX Entity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_2811",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_2811"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "404 (not found) - Get DX Entity by invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.be.notFound;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:ItemNotFound\");\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Hadapsar_Gadital_03",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Hadapsar_Gadital_03"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (type of item) - List Type (Data Model) given Resource Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Noble Hospital junction_35&rel=type",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relationship"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Noble Hospital junction_35"
										},
										{
											"key": "rel",
											"value": "type"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (type of item) - List Type (Data Model) given ResourceGroup id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=type",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relationship"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
										},
										{
											"key": "rel",
											"value": "type"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Instance APIs",
			"item": [
				{
					"name": "201 (success) - Create Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"    const resultsjsonData = body.results[0];\r",
									"    pm.expect(resultsjsonData).to.have.property(\"id\");\r",
									"    const ID = resultsjsonData.id;\r",
									"    pm.globals.set(\"instance_id\",ID);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{base}}/instance?id=mumbai",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "poone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (bad request) - Create Instance with invalid query param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{base}}/instance?ide=poone",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "ide",
									"value": "poone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Delete Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{base}}/instance?id={{instance_id}}",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "{{instance_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (unauthorized access) - Delete Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidAuthorizationToken\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "tokenAbcd",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{base}}/instance?id={{instance_id}}",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "{{instance_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - Delete Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code\r",
									"pm.test(\"response is 404 (Not Found)\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test the response header\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"// Test the response\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Item is not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{base}}/instance?id={{instance_id}}",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "{{instance_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{base}}/list/instance",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"instance"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (success) - UnAuthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidAuthorizationToken\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{base}}/instance?id=pune",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "pune"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Items",
			"item": [
				{
					"name": "200 (success) - List Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/tags",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/instance",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"instance"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List ResourceGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/resourceGroup",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceGroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List ResourceServer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property( \"type\",  \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/resourceServer",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceServer"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/provider",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"provider"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/tag",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"tag"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/instanc",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"instanc"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List ResourceGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/resourceGrp",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceGrp"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List ResourceServer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/resourceSvr",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceSvr"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/rprovider",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"rprovider"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/resource",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resource"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid request)- Exceed limit value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/list/tags?limit=13323232320",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"tags"
							],
							"query": [
								{
									"key": "limit",
									"value": "13323232320"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Relationship APIs",
			"item": [
				{
					"name": "200 (success) - Relationship ResourceGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceGroup",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceGroup"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resource",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Provider [ResourceID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=provider",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "provider"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Provider [ResourceGroup]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo&rel=provider",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "provider"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship ResourceServer [ResourceId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceServer",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship ResourceServer [ResourceGroup]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resourceServer",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship ResourceServer [invalid ResourceGroup]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datwakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resourceServer",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datwakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Provider [invalid ResourceID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dwce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=provider",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dwce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "provider"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidValue) - Invalid Relationship-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceGrp",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceGrp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidValue) - Invalid Relationship-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resrce",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resrce"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidSyntax) - Invalid Relationship-3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&re1l=resource",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "re1l",
									"value": "resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidSyntax) - Invalid Relationship-4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?i1d=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceServer",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "i1d",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid request)- Response filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceGroup&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceGroup"
								},
								{
									"key": "filter",
									"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid request)- Exceed limit value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceGroup&limit=1000001",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceGroup"
								},
								{
									"key": "limit",
									"value": "1000001"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search APIs",
			"item": [
				{
					"name": "Relationship Search",
					"item": [
						{
							"name": "200 (success) - Search a relationship 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/relsearch?relationship=\"[provider.name]\"&value=\"[[IUDXAdmin]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relsearch"
									],
									"query": [
										{
											"key": "relationship",
											"value": "\"[provider.name]\""
										},
										{
											"key": "value",
											"value": "\"[[IUDXAdmin]]\""
										}
									]
								},
								"description": "Relationship Search 1 Success"
							},
							"response": []
						},
						{
							"name": "200 (success) - Search a relationship 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/relsearch?value=\"[[openAPI]]\"&relationship=\"[resourceGroup.accessObjectInfo.accessObjectType]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relsearch"
									],
									"query": [
										{
											"key": "limit",
											"value": "50",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "100",
											"disabled": true
										},
										{
											"key": "value",
											"value": "\"[[openAPI]]\""
										},
										{
											"key": "relationship",
											"value": "\"[resourceGroup.accessObjectInfo.accessObjectType]\""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Geo-Spatial Search",
					"item": [
						{
							"name": "Point (Circle) Search",
							"item": [
								{
									"name": "200 (success) - Search based on circle",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle InvalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidGeoValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "abc"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712ab]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712ab]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=abc&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abc"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle InvalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&abgeorel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abgeorel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometryabc=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometryabc",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request)- precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=1000&geometry=Point&coordinates=[73.9272851,18.5027121]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "1000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.9272851,18.5027121]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=100&geometry=Point&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "100"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- maxDistance Limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=50000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "50000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request) Negative maxDistance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=-5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "-5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate Infinity Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Polygon Search",
							"item": [
								{
									"name": "200 (success) - Search Polygon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidGeoValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=1within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "1within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&abcgeorel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abcgeorel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&abccoordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "abccoordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request) precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9324532,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9324532,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 ( Invalid request)- Coordinates Pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordiante infinity check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "LineString Search",
							"item": [
								{
									"name": "200 (success) - Search Line String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InternalError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidGeoValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=abcintersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "abcintersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&abcgeorel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abcgeorel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&abccoordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "abccoordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid Request)- Precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.8745374,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.8745374,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=LineString&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate inifinity check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bbox Search",
							"item": [
								{
									"name": "200 (success) - Search Bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8420,18.5305],[73.8665,18.5126]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.8420,18.5305],[73.8665,18.5126]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location1"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidGeoValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=withinab&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "withinab"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[sb73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[sb73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geopropertyabc",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georelan=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georelan",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinatesan=[[73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinatesan",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.84231220,18.5305],[73.8665,18.5126]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.84231220,18.5305],[73.8665,18.5126]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate infinity check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Text Search",
					"item": [
						{
							"name": "200 (success) - Text Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Bosch Climo\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Text Search Special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Bosch*\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch*\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid value) - Text Search Special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=.\"dss$%fdd&\"=&limit=50&offset=100",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": ".\"dss$%fdd"
										},
										{
											"key": "\"",
											"value": ""
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Text Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?abc123=\"text to search\"&limit=50&offset=100",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "abc123",
											"value": "\"text to search\""
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Search string size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Goliber Square Sivaji chowk Maharashtra near Railway station aqm pollution sensor iudx iudxadmin resource\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Goliber Square Sivaji chowk Maharashtra near Railway station aqm pollution sensor iudx iudxadmin resource\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Bosch Climo\"&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Bosch Climo\"&limit=1000000",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										},
										{
											"key": "limit",
											"value": "1000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Bosch Climo\"&limit=100&offset=100000",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tag Search",
					"item": [
						{
							"name": "200 (success) - Tag Search (filter,limit,offset)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,tags]&limit=100&offset=0",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,tags]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Tag Search multi value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=[tags]&value=[[pollution, flood]]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[tags]"
										},
										{
											"key": "value",
											"value": "[[pollution, flood]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Tag Search 2 (filter,limit,offset)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Tag Search 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[abc123]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[abc123]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Tag Search 2 multi value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=[tags]&value=[[abc, abc123]]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[tags]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=[abc]&value=[[abc123]]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=[abc]&value=[[abc, abc123]]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]&limit=100&offset=0",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId]&limit=1000000&offset=0",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId]"
										},
										{
											"key": "limit",
											"value": "1000000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId]&limit=100&offset=1000000",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "1000000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Attribute Search",
					"item": [
						{
							"name": "200 (success) - SimpleAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_2811]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_2811]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - SimpleAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Blue Diamond Square (Hotel Taj)_10]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Blue Diamond Square (Hotel Taj)_10]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - MultiAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags,deviceId]\"&value=\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags,deviceId]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - NestedAttributeSearch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags,location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm, flood], [pune,delhi]]\""
										},
										{
											"key": "filter",
											"value": "[deviceModelInfo.name]",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Non existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[non-existing-id]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[non-existing-id]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value)  - SimpleAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid property) - InvalidProperty-1 SimpleAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[non-existing property]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[non-existing property]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid property) - InvalidProperty-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=[abc]&value=[[abc, abc123]]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed property queryParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id,name,tags,location,deviceId]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id,name,tags,location,deviceId]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed value pair queryParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id,name,tags,location]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id,name,tags,location]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed Value queryParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id,name,tags,location]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1,sensor2,sensor3,sensor4,sensor5],[aqm],[pune]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id,name,tags,location]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1,sensor2,sensor3,sensor4,sensor5],[aqm],[pune]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"&filter=[id,name,tags]&limit=10000000",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags]"
										},
										{
											"key": "limit",
											"value": "10000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"&filter=[id,name,tags]&limit=10&offset=1001001",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags]"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "1001001"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Complex Search",
					"item": [
						{
							"name": "200 (success) - GeoFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								},
								"description": "Success-3 GeoText (filter)"
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TagsFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[aqm]]\"&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TextFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?q=\"Golibar Square\"&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"&filter=[tags,id,location.geometry.coordinates]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=10001",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name]"
										},
										{
											"key": "limit",
											"value": "10001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=1001&offset=1010101",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name]"
										},
										{
											"key": "limit",
											"value": "1001"
										},
										{
											"key": "offset",
											"value": "1010101"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Count APIs",
			"item": [
				{
					"name": "200 (success) - Count Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\",159);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"itemDescription\": \"Live location of solid waste managemet vehicles operating in varanasi\",\r\n    \"@context\": [\r\n        \"https://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/swm_context.json\"\r\n    ],\r\n    \"onboardedBy\": \"Technical consultant at rbccps.org\",\r\n    \"providerId\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n    \"refBaseSchema\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"https://raw.githubusercontent.com/iudx/iudx-ld/master/base_schemas/v0.0.0/resourceItem_schema.json\"\r\n    },\r\n    \"resourceServerGroup\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in/varanasi-swm-vehicles\"\r\n    },\r\n    \"createdAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    },\r\n    \"refDataModel\": {\r\n        \"value\": \"https://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/civic_swm_vehicle_0.json\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"itemStatus\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"active\"\r\n    },\r\n    \"resourceServer\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in\"\r\n    },\r\n    \"coverageRegion\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": {\r\n            \"address\": \"Varanasi, Uttar Pradesh, India\",\r\n            \"geometry\": {\r\n                \"type\": \"Polygon\",\r\n                \"coordinates\": [\r\n                    [\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ],\r\n                        [\r\n                            83.00497055053711,\r\n                            25.289559766014474\r\n                        ],\r\n                        [\r\n                            83.00857543945312,\r\n                            25.309269760067775\r\n                        ],\r\n                        [\r\n                            83.04410934448242,\r\n                            25.329752340442084\r\n                        ],\r\n                        [\r\n                            83.05732727050781,\r\n                            25.334251837065878\r\n                        ],\r\n                        [\r\n                            83.05887222290039,\r\n                            25.34635310133767\r\n                        ],\r\n                        [\r\n                            83.01218032836914,\r\n                            25.371327523300355\r\n                        ],\r\n                        [\r\n                            82.94471740722656,\r\n                            25.366674295455695\r\n                        ],\r\n                        [\r\n                            82.93373107910155,\r\n                            25.316408022244975\r\n                        ],\r\n                        [\r\n                            82.94986724853516,\r\n                            25.263016051488446\r\n                        ],\r\n                        [\r\n                            82.96394348144531,\r\n                            25.22668366866147\r\n                        ],\r\n                        [\r\n                            82.97733306884766,\r\n                            25.213017398428725\r\n                        ],\r\n                        [\r\n                            83.01544189453125,\r\n                            25.219850725454755\r\n                        ],\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ]\r\n                    ]\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"authorizationServerInfo\": {\r\n        \"type\": \"Property\",\r\n        \"value\": {\r\n            \"authType\": \"iudx-auth\",\r\n            \"authServer\": \"http://auth.iudx.org.in\"\r\n        }\r\n    },\r\n    \"tags\": {\r\n        \"type\": \"Property\",\r\n        \"value\": [\r\n            \"solid\",\r\n            \"garbage\",\r\n            \"waste\",\r\n            \"management\",\r\n            \"collection\",\r\n            \"vehicle\",\r\n            \"truck\"\r\n        ]\r\n    },\r\n    \"itemType\": \"Resource\",\r\n    \"provider\": {\r\n        \"value\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"dataAttributeList\": {\r\n        \"secure\": [],\r\n        \"open\": [\r\n            \"vehicleNo\",\r\n            \"wardNo\",\r\n            \"dateTime\",\r\n            \"latitude\",\r\n            \"longitude\",\r\n            \"location\"\r\n        ]\r\n    },\r\n    \"resourceId\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"varanasi-swm-vehicles-live\"\r\n    },\r\n    \"updatedAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{host}}{{base}}/count?value=[[pollution]]&property=[tags]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "value",
									"value": "[[pollution]]"
								},
								{
									"key": "property",
									"value": "[tags]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag SingleAttr InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=\"[tags]\"&value=\"[[abc123]]\"",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags]\""
								},
								{
									"key": "value",
									"value": "\"[[abc123]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag MultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 687);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=[tags]&value=[[pollution, flood]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[tags]"
								},
								{
									"key": "value",
									"value": "[[pollution, flood]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag SingleAttr InvalidMultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=[tags]&value=[[abc, abc123]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[tags]"
								},
								{
									"key": "value",
									"value": "[[abc, abc123]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag InvalidProperty InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=[abc]&value=[[abc123]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[abc]"
								},
								{
									"key": "value",
									"value": "[[abc123]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=[id]&value=[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Attribute SingleProperty MultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=[id]&value=[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Chandani_Square_25]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Chandani_Square_25]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute SingleProperty InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=[id]&value=[[non-existing-id]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[non-existing-id]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute SingleProperty MultiValue with InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\"",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[id]\""
								},
								{
									"key": "value",
									"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute Nested-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=\"[tags,deviceId.keyword]\"&value=\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\"",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags,deviceId.keyword]\""
								},
								{
									"key": "value",
									"value": "\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute Nested-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response count\", function() {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\",160);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags,location.address]\""
								},
								{
									"key": "value",
									"value": "\"[[aqm, flood], [pune,delhi]]\""
								},
								{
									"key": "filter",
									"value": "[deviceModelInfo.name]",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute InvalidProperty (totalHits=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?property=\"[non-existing property]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune_Railway_Station_28]]\"",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[non-existing property]\""
								},
								{
									"key": "value",
									"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune_Railway_Station_28]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count based on Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?q=\"Bosch Climo\"",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": "\"Bosch Climo\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Text using SpecialChar[*]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?q=\"Bosch*\"",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": "\"Bosch*\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Text InvalidSyntax-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?q=.\"dss$%fdd&\"=&limit=50&offset=100",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": ".\"dss$%fdd"
								},
								{
									"key": "\"",
									"value": ""
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Text InvalidSyntax-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?abc123=\"text to search\"&limit=50&offset=100",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abc123",
									"value": "\"text to search\""
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.9,18.6]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.9,18.6]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidGeoValue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "abc"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.927285,18.502712]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{base}}/count?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.927285,18.502712]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Polygons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Polygon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InternalError\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "abclocation"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Polygon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}{{base}}/count?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "abclocation"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73,20],[75,18]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73,20],[75,18]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InternalError\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location1"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/count?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geopropertyabc",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rating APIs",
			"item": [
				{
					"name": "Create Rating",
					"item": [
						{
							"name": "200 (Success) - Create Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rating\": 4.8,\n    \"comment\": \"good resource\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (Invalid Token) - Create Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rating\": 4.8,\n    \"comment\": \"v.good resource\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Schema) - Create Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ratingzzz\": 4.8\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Acess Count) - Create Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:AccessDenied\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rating\": 4.8,\n    \"comment\": \"good resource\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=stqc.gov.in/3f1e74d4fe0d1a6970046ecff3d3ae5117d93a3d/rs.iudx.io/Bangalore-Flood-Sensor/Ingrid",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "stqc.gov.in/3f1e74d4fe0d1a6970046ecff3d3ae5117d93a3d/rs.iudx.io/Bangalore-Flood-Sensor/Ingrid"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Rating",
					"item": [
						{
							"name": "200 (Success) - Update Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rating\": 4.8,\n    \"comment\": \"v.good resource\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (Invalid Token) - Update Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rating\": 4.8,\n    \"comment\": \"v.good resource\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Schema) - Update Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ratingzzz\": 4.8,\n    \"comment\": \"v.good resource\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Rating",
					"item": [
						{
							"name": "200 (Success) - Get Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=datakaveri.org/1022f4c20542abd5087107c0b6de4cb3130c5b7b/rs.iudx.io/sqtc-test-group-1/FWR015",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/1022f4c20542abd5087107c0b6de4cb3130c5b7b/rs.iudx.io/sqtc-test-group-1/FWR015"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "204 (No Content) - Get Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-etf",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-etf"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (Success) - Get All Ratings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=datakaveri.org/1022f4c20542abd5087107c0b6de4cb3130c5b7b/rs.iudx.io/sqtc-test-group-1/FWR015&type=group",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/1022f4c20542abd5087107c0b6de4cb3130c5b7b/rs.iudx.io/sqtc-test-group-1/FWR015"
										},
										{
											"key": "type",
											"value": "group"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (Success) - Get Average Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.io/pune-env-flood&type=average",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.io/pune-env-flood"
										},
										{
											"key": "type",
											"value": "average"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (Invalid Token) - Get Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Rating",
					"item": [
						{
							"name": "200 (Success) - Delete Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{openToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (Invalid Token) - Delete Rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood",
									"host": [
										"{{host}}consumer"
									],
									"path": [
										"ratings"
									],
									"query": [
										{
											"key": "id",
											"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "NLP APIs",
			"item": [
				{
					"name": "200 (success) - NLP Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/nlpsearch?q=where can I halt near chandigarh",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"nlpsearch"
							],
							"query": [
								{
									"key": "q",
									"value": "where can I halt near chandigarh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (not found) - NLP Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"title\", \"Invalid Syntax\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/nlpsearch?q=where can I halt near chandiga",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"nlpsearch"
							],
							"query": [
								{
									"key": "q",
									"value": "where can I halt near chandiga"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mlayer APIs",
			"item": [
				{
					"name": "Mlayer Instance",
					"item": [
						{
							"name": "Create Instance",
							"item": [
								{
									"name": "200 (Success) - Create Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"pm.environment.set(\"instanceId\",data.results[0].id);",
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"name\": \"lucknow\",\n   \"cover\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpg\",\n   \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpg\",\n   \"logo\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 (Invalid Token) - Create Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "abc",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"name\": \"lucknow\",\n   \"cover\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpg\",\n   \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpg\",\n   \"logo\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknoe.jpg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid Schema) - Create Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"name\": \"lucknow\",\n   \"cooover\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpg\",\n   \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpg\",\n   \"logo\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Instance",
							"item": [
								{
									"name": "200 (Success) - Update Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cover\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpeg\",\r\n    \"name\": \"lucknow\",\r\n    \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpeg\",\r\n    \"logo\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpeg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{instanceId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{instanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 (Invalid Token) - Update Instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "token",
												"value": "abc",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cover\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.JPEG\",\r\n    \"name\": \"lucknow\",\r\n    \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpeg\",\r\n    \"logo\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpeg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{instanceId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{instanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid Schema) - Update Instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cover\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.JPEG\",\r\n    \"nameee\": \"lucknow\",\r\n    \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpeg\",\r\n    \"logo\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpeg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{instanceId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{instanceId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Instance",
							"item": [
								{
									"name": "200 (Success) - Get All Instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Instance",
							"item": [
								{
									"name": "200 (Success) - Delete Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{instanceId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{instanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 (Invalid Token) - Delete Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "token",
												"value": "abc",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{instanceId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{instanceId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mlayer Domain",
					"item": [
						{
							"name": "Create Domain",
							"item": [
								{
									"name": "200 (Success) - Create Domains",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"pm.environment.set(\"domainId\",data.results[0].id);",
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\":\"Data Models that pertain to civic domain\",\n    \"icon\":\"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.png\",\n    \"label\":\"Civic\",\n    \"name\":\"civic\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/domain",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"domain"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid Schema) - Create Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"descriiiption\":\"Data Models that pertain to civic domain\",\n    \"icon\":\"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.png\",\n    \"label\":\"Civic\",\n    \"name\":\"civic\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/domain",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"domain"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 (Invalid Token) - Create Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "abc",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"descriiiption\":\"Data Models that pertain to civic domain\",\n    \"icon\":\"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.png\",\n    \"label\":\"Civic\",\n    \"name\":\"civic\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/domain",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"domain"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Mlayer Domain",
							"item": [
								{
									"name": "200 (Success) - Update Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.jpeg\",\r\n    \"name\": \"civic\",\r\n    \"description\": \"Data Models that pertain to civic domain\",\r\n    \"label\": \"Civic\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/domain?id={{domainId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"domain"
											],
											"query": [
												{
													"key": "id",
													"value": "{{domainId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 (Invalid Token) - Update Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "token",
												"value": "abc",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"icon\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.jpeg\",\r\n    \"name\": \"civic\",\r\n    \"description\": \"Data Models that pertain to civic domain\",\r\n    \"label\": \"Civic\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{domainId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{domainId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid Schema) - Update Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iconnnn\": \"https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.jpeg\",\r\n    \"name\": \"civic\",\r\n    \"description\": \"Data Models that pertain to civic domain\",\r\n    \"label\": \"Civic\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{domainId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{domainId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Domain",
							"item": [
								{
									"name": "200 (Success) - Get All Domains",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/domain",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"domain"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Domain",
							"item": [
								{
									"name": "200 (Success) - Delete Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "token",
												"value": "{{adminToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/domain?id={{domainId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"domain"
											],
											"query": [
												{
													"key": "id",
													"value": "{{domainId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 (Invalid Token) - Delete Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Check response body\", function () {    ",
													"    const body = pm.response.json();",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "token",
												"value": "abc",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}{{base}}/internal/ui/instance?id={{domainId}}",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"internal",
												"ui",
												"instance"
											],
											"query": [
												{
													"key": "id",
													"value": "{{domainId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mlayer Providers",
					"item": [
						{
							"name": "200 (Success) - Get Providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/internal/ui/providers",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"internal",
										"ui",
										"providers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mlayer GeoQuery",
					"item": [
						{
							"name": "200 (Success) - Post GeoQuery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":[\"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/faridabad-camera-feeds\",\"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\",\"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/chennai-bike-docking-locations\"],\r\n    \"instance\":\"pune\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/internal/ui/geoquery",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"internal",
										"ui",
										"geoquery"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Schema) - Post GeoQuery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"iddd\":[\"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/faridabad-camera-feeds\",\"datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app\"],\r\n    \"instance\":\"pune\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/internal/ui/geoquery",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"internal",
										"ui",
										"geoquery"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mlayer Dataset",
					"item": [
						{
							"name": "200 (Success) - Get All Datasets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/internal/ui/dataset",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"internal",
										"ui",
										"dataset"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (Success) - Post Dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/internal/ui/dataset?id=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-env-aqm",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"internal",
										"ui",
										"dataset"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-env-aqm"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mlayer Popular Datasets",
					"item": [
						{
							"name": "200 (Success) - Get landing page details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/internal/ui/popularDatasets",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"internal",
										"ui",
										"popularDatasets"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Geocoding APIs",
			"item": [
				{
					"name": "200(Success) - Get all geolocations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/geo?q=malleswaram",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base}}",
								"geo"
							],
							"query": [
								{
									"key": "q",
									"value": "malleswaram"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Location not found) - location size 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:ItemNotFound\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/geo?q=",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base}}",
								"geo"
							],
							"query": [
								{
									"key": "q",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid Prameter) - invalid query parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidParamValue\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/geo?p=malleswaram",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base}}",
								"geo"
							],
							"query": [
								{
									"key": "p",
									"value": "malleswaram"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(Invalid GeoValue) - Gequery value error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidGeoValue\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}{{base}}/geo?q=++",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{base}}",
								"geo"
							],
							"query": [
								{
									"key": "q",
									"value": "++"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}