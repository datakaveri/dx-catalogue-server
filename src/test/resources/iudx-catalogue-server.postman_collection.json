{
	"info": {
		"_postman_id": "400cf007-ab79-4a0e-ad8c-81100105bead",
		"name": "iudx-catalogue-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CRUD APIs",
			"item": [
				{
					"name": "Create Item",
					"item": [
						{
							"name": "200 (success) - Create an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4801ae99-cdcc-490d-8a99-c6360b84cead",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"@context\": \"https://voc.iudx.org.in/\",\r\n        \"type\": [\r\n            \"iudx:Resource\",\r\n            \"iudx:EnvAQM\"\r\n        ],\r\n        \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n        \"description\": \"Description for Bosch-Climo AQM resource\",\r\n        \"tags\": [\r\n            \"environment\",\r\n            \" air quality\",\r\n            \" climate\",\r\n            \" air\",\r\n            \" aqi\",\r\n            \" aqm\",\r\n            \" climo\",\r\n            \" pollution\",\r\n            \" so2\",\r\n            \" co2\",\r\n            \" co\",\r\n            \" no\",\r\n            \" no2\",\r\n            \" pm2.5\",\r\n            \" pm10\",\r\n            \" humidity\",\r\n            \" temperature\",\r\n            \" ozone\",\r\n            \" o3\",\r\n            \" noise\",\r\n            \" light\",\r\n            \" uv\"\r\n        ],\r\n        \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n        \"itemStatus\": \"ACTIVE\",\r\n        \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n        \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n        \"location\": {\r\n            \"type\": \"Place\",\r\n            \"address\": \"ABD area, Pune\",\r\n            \"geometry\": {\r\n                \"coordinates\": [\r\n                    73.874537,\r\n                    18.528311\r\n                ],\r\n                \"type\": \"Point\"\r\n            }\r\n        },\r\n        \"deviceModel\": {\r\n            \"brandName\": \"Climo\",\r\n            \"modelName\": \"Bosch-Climo\",\r\n            \"modelURL\": \"http://boschclimo.com\"\r\n        },\r\n        \"name\": \"Pune Railway Station_28\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (invalid credentials) - Create an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a7cd070-1a8f-4675-87b9-904dcce6b5c0",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response json body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"failed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"@context\": \"https://voc.iudx.org.in/\",\r\n        \"type\": [\r\n            \"iudx:Resource\",\r\n            \"iudx:EnvAQM\"\r\n        ],\r\n        \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n        \"description\": \"Description for Bosch-Climo AQM resource\",\r\n        \"tags\": [\r\n            \"environment\",\r\n            \" air quality\",\r\n            \" climate\",\r\n            \" air\",\r\n            \" aqi\",\r\n            \" aqm\",\r\n            \" climo\",\r\n            \" pollution\",\r\n            \" so2\",\r\n            \" co2\",\r\n            \" co\",\r\n            \" no\",\r\n            \" no2\",\r\n            \" pm2.5\",\r\n            \" pm10\",\r\n            \" humidity\",\r\n            \" temperature\",\r\n            \" ozone\",\r\n            \" o3\",\r\n            \" noise\",\r\n            \" light\",\r\n            \" uv\"\r\n        ],\r\n        \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n        \"itemStatus\": \"ACTIVE\",\r\n        \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n        \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n        \"location\": {\r\n            \"type\": \"Place\",\r\n            \"address\": \"ABD area, Pune\",\r\n            \"geometry\": {\r\n                \"coordinates\": [\r\n                    73.874537,\r\n                    18.528311\r\n                ],\r\n                \"type\": \"Point\"\r\n            }\r\n        },\r\n        \"deviceModel\": {\r\n            \"brandName\": \"Climo\",\r\n            \"modelName\": \"Bosch-Climo\",\r\n            \"modelURL\": \"http://boschclimo.com\"\r\n        },\r\n        \"name\": \"Pune Railway Station_28\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid schema) - Create an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eac80bc4-e0ef-49e9-b738-80de9dc3a707",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"failed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource\",\r\n  \"tags\": [\r\n    \"environment\",\r\n    \" air quality\",\r\n    \" climate\",\r\n    \" air\",\r\n    \" aqi\",\r\n    \" aqm\",\r\n    \" climo\",\r\n    \" pollution\",\r\n    \" so2\",\r\n    \" co2\",\r\n    \" co\",\r\n    \" no\",\r\n    \" no2\",\r\n    \" pm2.5\",\r\n    \" pm10\",\r\n    \" humidity\",\r\n    \" temperature\",\r\n    \" ozone\",\r\n    \" o3\",\r\n    \" noise\",\r\n    \" light\",\r\n    \" uv\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  },\r\n  \"name\": \"Pune Railway Station_28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid links) - Create an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "361fb1ca-3ccb-4b81-aab5-453962a03d20",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"failed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n \"type\": [\r\n    \"iudx:Resource\",\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource\",\r\n  \"tags\": [\r\n    \"environment\",\r\n    \" air quality\",\r\n    \" climate\",\r\n    \" air\",\r\n    \" aqi\",\r\n    \" aqm\",\r\n    \" climo\",\r\n    \" pollution\",\r\n    \" so2\",\r\n    \" co2\",\r\n    \" co\",\r\n    \" no\",\r\n    \" no2\",\r\n    \" pm2.5\",\r\n    \" pm10\",\r\n    \" humidity\",\r\n    \" temperature\",\r\n    \" ozone\",\r\n    \" o3\",\r\n    \" noise\",\r\n    \" light\",\r\n    \" uv\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo2565\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  },\r\n  \"name\": \"Pune Railway Station_28\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update Item",
					"item": [
						{
							"name": "200 (success) - Update an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a665dc89-946e-4b9e-86d4-4549eff87eed",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:Resource\",\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"name\": \"Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource 28\",\r\n  \"tags\": [\r\n    \"New Tag, aqm,flood.test\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 (invalid credentials) - Update an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d68c51-5b7c-4460-9a60-27d43c5c16a8",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"failed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "auth.iudx.org.in/md.adil@datakaveri.org/a64be46caee002546332f1f624bf4212"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:Resource\",\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"name\": \"Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource 2\",\r\n  \"tags\": [\r\n    \"New Tag, aqm,flood\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid schema) - Update an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "618c4814-aaf1-45e6-bbc4-67a2cb0f05fc",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"failed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"name\": \"Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource 2\",\r\n  \"tags\": [\r\n    \"New Tag, aqm,flood\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid links) - Update an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3190854-386b-4c77-a364-bdd0355ff517",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"failed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:Resource\",\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"name\": \"Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource 2\",\r\n  \"tags\": [\r\n    \"New Tag, aqm,flood\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo23456\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}{{base}}/item/",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Item",
					"item": [
						{
							"name": "200 (success) - Delete an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c018390-b819-4e33-bd01-c7bc9c6474cb",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://{{host}}{{base}}/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Delete an IUDX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86d29dca-7cf6-4e62-ab21-7a02f47b31fb",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host}}{{base}}/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Bus Station_123",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Bus Station_123"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get/List Item",
					"item": [
						{
							"name": "200 (success) - Get IUDX Entity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9dd265e-c136-41cd-8ddc-8dc498683551",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Noble Hospital junction_35",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Noble Hospital junction_35"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid id) - Get IUDX Entity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "747a5020-3415-458b-80aa-58d66c14dce0",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Hadapsar_Gadital_03",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Hadapsar_Gadital_03"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (type of item) - List Type (Data Model) given Resource Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0f5e1cf-315d-4e0a-84f8-56eb6a73da72",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Noble Hospital junction_35&rel=type",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relationship"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Noble Hospital junction_35"
										},
										{
											"key": "rel",
											"value": "type"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (type of item) - List Type (Data Model) given ResourceGroup id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462536ea-a701-4781-b223-54e9377c372f",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=type",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relationship"
									],
									"query": [
										{
											"key": "id",
											"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
										},
										{
											"key": "rel",
											"value": "type"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Instance APIs",
			"item": [
				{
					"name": "200 (success) - Create Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27076660-337b-4c4e-a677-19e614f76975",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{admin_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}{{base}}/instance?id=pune",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "pune"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "201 (success) - Delete Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3db3d9f2-f557-4d33-8a65-f8ff7b033ad4",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{admin_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}{{base}}/instance?id=pune",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "pune"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9027623-2887-4428-91bd-9c1ac964e94c",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "auth.iudx.org.in/rakshit.ramesh@datakaveri.org/c4fd7318be270d44c69da4ec40b1c6e4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}{{base}}/list/instance",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"instance"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (success) - UnAuthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "422833ed-166f-45e3-976d-922f198dc983",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"failed\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{admin_token1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}{{base}}/instance?id=pune",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"instance"
							],
							"query": [
								{
									"key": "id",
									"value": "pune"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "List Items",
			"item": [
				{
					"name": "200 (success) - List Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7082710c-691a-46fa-8448-002235e5bd35",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/tags",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a70abf59-0f9d-4b10-bd15-7459e3e7ffda",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/instance",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"instance"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List ResourceGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e238a6a-d70c-47b5-ac8f-4403c1dd4f0b",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/resourceGroup",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceGroup"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List ResourceServer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bb4f525-4a12-49ee-b577-ce2bf8b9228c",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/resourceServer",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceServer"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - List Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ef3b3d3-f8d8-4472-b463-f25231b068c0",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/provider",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"provider"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7082710c-691a-46fa-8448-002235e5bd35",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/tag",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"tag"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd3da9ff-bded-4b87-add5-74dcd01a2489",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/instanc",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"instanc"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List ResourceGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "319461a4-aa79-4438-8d60-74f54f05f14f",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/resourceGrp",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceGrp"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List ResourceServer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aeafa604-3fad-423e-b2c5-91c91158ed80",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/resourceSvr",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resourceSvr"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e3e3624-4a08-4c11-8871-4a1013bc3549",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/rprovider",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"rprovider"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid itemType)- List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ee2ed5f-45f4-4465-92cf-21d7715e728d",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/list/resource",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"list",
								"resource"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Relationship APIs",
			"item": [
				{
					"name": "200 (success) - Relationship ResourceGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34fc0eb7-7f6b-4613-a8eb-7901e9feda58",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceGroup",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceGroup"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec1d8c6f-20c1-4fe0-a6b6-b10805c7642f",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resource",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Provider [ResourceID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fba20d-5dc6-4229-ab49-f0d9130212bf",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=provider",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "provider"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Provider [ResourceGroup]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b116872-cbc5-4c50-9080-d77687833cf8",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo&rel=provider",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "provider"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship ResourceServer [ResourceId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01225547-2eaf-4e32-88f5-6de9d1a96744",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceServer",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship ResourceServer [ResourceGroup]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea6a221f-e29d-4869-8221-599ebf2eb6eb",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resourceServer",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship ResourceServer [invalid ResourceGroup]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea6a221f-e29d-4869-8221-599ebf2eb6eb",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datwakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resourceServer",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datwakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Relationship Provider [invalid ResourceID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fba20d-5dc6-4229-ab49-f0d9130212bf",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dwce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=provider",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dwce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "provider"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidValue) - Invalid Relationship-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34fc0eb7-7f6b-4613-a8eb-7901e9feda58",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceGrp",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceGrp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidValue) - Invalid Relationship-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec1d8c6f-20c1-4fe0-a6b6-b10805c7642f",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&rel=resrce",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "rel",
									"value": "resrce"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidSyntax) - Invalid Relationship-3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec1d8c6f-20c1-4fe0-a6b6-b10805c7642f",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo&re1l=resource",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "id",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo"
								},
								{
									"key": "re1l",
									"value": "resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalidSyntax) - Invalid Relationship-4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01225547-2eaf-4e32-88f5-6de9d1a96744",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/relationship?i1d=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24&rel=resourceServer",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"relationship"
							],
							"query": [
								{
									"key": "i1d",
									"value": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Sadhu_Wasvani_Square_24"
								},
								{
									"key": "rel",
									"value": "resourceServer"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Search APIs",
			"item": [
				{
					"name": "Relationship Search",
					"item": [
						{
							"name": "200 (success) - Search a relationship 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b79d4ad0-3317-454e-82e5-48531c3ea63f",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/relsearch?relationship=\"[provider.name]\"&value=\"[[IUDXAdmin]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relsearch"
									],
									"query": [
										{
											"key": "relationship",
											"value": "\"[provider.name]\""
										},
										{
											"key": "value",
											"value": "\"[[IUDXAdmin]]\""
										}
									]
								},
								"description": "Relationship Search 1 Success"
							},
							"response": []
						},
						{
							"name": "200 (success) - Search a relationship 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7538bfb2-ff7f-408b-bc08-4ebc332fa6a2",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/relsearch?value=\"[[openAPI]]\"&relationship=\"[resourceGroup.accessObjectInfo.accessObjectType]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relsearch"
									],
									"query": [
										{
											"key": "limit",
											"value": "50",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "100",
											"disabled": true
										},
										{
											"key": "value",
											"value": "\"[[openAPI]]\""
										},
										{
											"key": "relationship",
											"value": "\"[resourceGroup.accessObjectInfo.accessObjectType]\""
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Geo-Spatial Search",
					"item": [
						{
							"name": "Point (Circle) Search",
							"item": [
								{
									"name": "200 (success) - Search based on circle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccce5082-1bc9-463d-a025-fc801c9ef69e",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle InvalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4f25c8e-5957-4a84-a1c1-0216b507bb8e",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "abc"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8be22342-fc99-47ed-ae2b-e08a679a2dd0",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712ab]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712ab]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cfd4a2b-46d0-4346-af25-a91154d626c0",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=abc&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abc"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle InvalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e183d2d5-b4c8-421a-83c9-46d9df70d94c",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "552a97c6-448d-4b46-be96-dd9594562a9b",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&abgeorel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abgeorel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acc3bb65-c693-4ba8-a420-7699d1bdb747",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometryabc=Point&coordinates=[73.927285,18.502712]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometryabc",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Polygon Search",
							"item": [
								{
									"name": "200 (success) - Search Polygon",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "044be242-ddac-43f6-a39c-7d2d286b2783",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcb760c3-6bb2-4423-b3cf-1c513447ef94",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91fa0ef1-7607-4c9b-b737-0c4fd2c71bf0",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=1within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "1within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "577b1b7e-9ac0-4bfe-8e36-f913432820f2",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc5cfa46-ad51-4d49-a2af-8e25bc8a289d",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8207fdd-2995-4340-af0a-0ef744895e0f",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&abcgeorel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abcgeorel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee4a7568-bb9b-4ce2-a267-6a9fbc39aa6c",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&abccoordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "abccoordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "LineString Search",
							"item": [
								{
									"name": "200 (success) - Search Line String",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1a2f2ff-d9d4-4d0e-b7ef-74263dbbf809",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4278cb30-40e5-496a-b23e-72dd58ece80d",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73cd8c35-8e0b-4ef2-97e7-cc15cf2ef95f",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=abcintersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "abcintersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a0dc96f-28c3-4bce-bb53-48d7b0cb22ea",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b567f72-b5e1-4ae8-8898-30bce0709a3f",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa4de2c6-630a-47cb-9f2c-6ddee05907b8",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&abcgeorel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abcgeorel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ff686e8-fd54-427b-9526-2015d705fffd",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&abccoordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "abccoordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Bbox Search",
							"item": [
								{
									"name": "200 (success) - Search Bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee3836d1-4940-4c3b-8a8d-cafb15795e7b",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8420,18.5305],[73.8665,18.5126]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.8420,18.5305],[73.8665,18.5126]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bb59ea3-a9dc-4f70-950e-d32f5aa6496b",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location1"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "668e97fe-a670-45f5-8a07-afde7ff9f581",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=withinab&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "withinab"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42aea99b-9339-410f-a38f-a3b29d4334a0",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[sb73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[sb73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "677c40f6-14c4-4e3c-8526-9e64d1f89e77",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geopropertyabc",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fd0f680-dfca-4d96-8cfa-aa09ea2adcf4",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georelan=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georelan",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1e15a8e-0e0e-4f95-ba0a-79807ce66fe6",
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinatesan=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "https",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinatesan",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Text Search",
					"item": [
						{
							"name": "200 (success) - Text Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0a62be3-91db-48a0-968d-34e83ff22088",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=\"Bosch Climo\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Text Search Special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2f288e2-593c-463b-aa35-bc2e16487691",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=\"Bosch*\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch*\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid value) - Text Search Special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "907df428-4de0-4b6e-84b4-d18df617bc4b",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=.\"dss$%fdd&\"&limit=50&offset=100",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": ".\"dss$%fdd"
										},
										{
											"key": "\"",
											"value": null
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Text Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74644b84-424c-4ac6-88a7-7c4eca7d91bf",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?abc123=\"text to search\"&limit=50&offset=100",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "abc123",
											"value": "\"text to search\""
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "100"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tag Search",
					"item": [
						{
							"name": "200 (success) - Tag Search (filter,limit,offset)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97906447-9f56-4783-a0fb-88532bd61213",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,tags]&limit=100&offset=0",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,tags]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Tag Search multi value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98c8329b-6b07-4627-a8c6-cc81e99e47f4",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=[tags]&value=[[pollution, flood]]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[tags]"
										},
										{
											"key": "value",
											"value": "[[pollution, flood]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Tag Search 2 (filter,limit,offset)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97f13d7f-b849-4e23-b26c-7aa914834b59",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Tag Search 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0c4dc3d-f848-4dd1-a8e4-523cd1e4c838",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[abc123]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[abc123]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Tag Search 2 multi value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5edddfe1-9ee1-4808-a245-7a7c8db0951a",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=[tags]&value=[[abc, abc123]]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[tags]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e722fd2-afc3-4069-bc90-bd7f41e03aec",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=[abc]&value=[[abc123]]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ad32cfd-2959-43c8-9bed-2daea9c5edd9",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=[abc]&value=[[abc, abc123]]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Attribute Search",
					"item": [
						{
							"name": "200 (success) - SimpleAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abdcab73-9ffa-42b0-b860-e35d223a9a0c",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - SimpleAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c438406-024e-476e-94d3-6f77fabf67af",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Blue Diamond Square (Hotel Taj)_10]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Blue Diamond Square (Hotel Taj)_10]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - MultiAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a70baccb-39c9-4479-b642-6c1ecc0bfe7d",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[tags,deviceId]\"&value=\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags,deviceId]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - NestedAttributeSearch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d264b613-2f76-406b-a279-0117c07ae76c",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags,location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm, flood], [pune,delhi]]\""
										},
										{
											"key": "filter",
											"value": "[deviceModelInfo.name]",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Non existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39c0c9e8-0916-47ab-9832-3e443954f780",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[non-existing-id]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[non-existing-id]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value)  - SimpleAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "942ede13-5b0c-456f-9dd6-f0f27e3743b4",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid property) - InvalidProperty-1 SimpleAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e46b51e-009e-4fd9-9d65-4bc7b1e2a709",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[non-existing property]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[non-existing property]\""
										},
										{
											"key": "value",
											"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid property) - InvalidProperty-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cde2f0c-f3e5-4563-b3f2-b5202ff20922",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=[abc]&value=[[abc, abc123]]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Complex Search",
					"item": [
						{
							"name": "200 (success) - GeoFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e2ecee2-b644-425d-af38-87ffa73efab8",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f6f24ed-8957-4680-af7f-042cc92b34e7",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba31aa28-08fe-46ac-b789-acbfba6c35d9",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26723d1b-7630-4721-b9c8-b662011ef0e3",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf97765f-5a2d-478a-a3d8-713cc356899b",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								},
								"description": "Success-3 GeoText (filter)"
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb1da6c7-02be-4810-9248-0836fa87d0f2",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c92e06e-457a-4222-afdc-5ac280d90567",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText (filter)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TagsFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ed94dd8-5087-416a-b1c9-6f6864070173",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[aqm]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TextFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3eea4ac3-cadb-4d23-8179-1be955664982",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?q=\"Golibar Square\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "671d4839-b2b1-4dbe-a30e-d4884b05c5ef",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb656483-00ce-4d80-890c-e10dad05cf1a",
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "https",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Count APIs",
			"item": [
				{
					"name": "200 (success) - Count Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f76b38e-0031-4443-ace8-8e29ec4fd787",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"itemDescription\": \"Live location of solid waste managemet vehicles operating in varanasi\",\r\n    \"@context\": [\r\n        \"https://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/swm_context.json\"\r\n    ],\r\n    \"onboardedBy\": \"Technical consultant at rbccps.org\",\r\n    \"providerId\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n    \"refBaseSchema\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"https://raw.githubusercontent.com/iudx/iudx-ld/master/base_schemas/v0.0.0/resourceItem_schema.json\"\r\n    },\r\n    \"resourceServerGroup\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in/varanasi-swm-vehicles\"\r\n    },\r\n    \"createdAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    },\r\n    \"refDataModel\": {\r\n        \"value\": \"https://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/civic_swm_vehicle_0.json\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"itemStatus\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"active\"\r\n    },\r\n    \"resourceServer\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in\"\r\n    },\r\n    \"coverageRegion\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": {\r\n            \"address\": \"Varanasi, Uttar Pradesh, India\",\r\n            \"geometry\": {\r\n                \"type\": \"Polygon\",\r\n                \"coordinates\": [\r\n                    [\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ],\r\n                        [\r\n                            83.00497055053711,\r\n                            25.289559766014474\r\n                        ],\r\n                        [\r\n                            83.00857543945312,\r\n                            25.309269760067775\r\n                        ],\r\n                        [\r\n                            83.04410934448242,\r\n                            25.329752340442084\r\n                        ],\r\n                        [\r\n                            83.05732727050781,\r\n                            25.334251837065878\r\n                        ],\r\n                        [\r\n                            83.05887222290039,\r\n                            25.34635310133767\r\n                        ],\r\n                        [\r\n                            83.01218032836914,\r\n                            25.371327523300355\r\n                        ],\r\n                        [\r\n                            82.94471740722656,\r\n                            25.366674295455695\r\n                        ],\r\n                        [\r\n                            82.93373107910155,\r\n                            25.316408022244975\r\n                        ],\r\n                        [\r\n                            82.94986724853516,\r\n                            25.263016051488446\r\n                        ],\r\n                        [\r\n                            82.96394348144531,\r\n                            25.22668366866147\r\n                        ],\r\n                        [\r\n                            82.97733306884766,\r\n                            25.213017398428725\r\n                        ],\r\n                        [\r\n                            83.01544189453125,\r\n                            25.219850725454755\r\n                        ],\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ]\r\n                    ]\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"authorizationServerInfo\": {\r\n        \"type\": \"Property\",\r\n        \"value\": {\r\n            \"authType\": \"iudx-auth\",\r\n            \"authServer\": \"http://auth.iudx.org.in\"\r\n        }\r\n    },\r\n    \"tags\": {\r\n        \"type\": \"Property\",\r\n        \"value\": [\r\n            \"solid\",\r\n            \"garbage\",\r\n            \"waste\",\r\n            \"management\",\r\n            \"collection\",\r\n            \"vehicle\",\r\n            \"truck\"\r\n        ]\r\n    },\r\n    \"itemType\": \"Resource\",\r\n    \"provider\": {\r\n        \"value\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"dataAttributeList\": {\r\n        \"secure\": [],\r\n        \"open\": [\r\n            \"vehicleNo\",\r\n            \"wardNo\",\r\n            \"dateTime\",\r\n            \"latitude\",\r\n            \"longitude\",\r\n            \"location\"\r\n        ]\r\n    },\r\n    \"resourceId\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"varanasi-swm-vehicles-live\"\r\n    },\r\n    \"updatedAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "https://{{host}}{{base}}/count?value=[[pollution]]&property=[tags]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "value",
									"value": "[[pollution]]"
								},
								{
									"key": "property",
									"value": "[tags]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag SingleAttr InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "def858c0-4986-4fd2-bf5e-3263f257440d",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=\"[tags]\"&value=\"[[abc123]]\"",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags]\""
								},
								{
									"key": "value",
									"value": "\"[[abc123]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag MultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53389e9e-d478-466f-9e25-db72597778e5",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=[tags]&value=[[pollution, flood]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[tags]"
								},
								{
									"key": "value",
									"value": "[[pollution, flood]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag SingleAttr InvalidMultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e922e42d-9f35-49f9-ba94-d53d3f27d960",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=[tags]&value=[[abc, abc123]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[tags]"
								},
								{
									"key": "value",
									"value": "[[abc, abc123]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag InvalidProperty InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22fecbae-bfb3-466f-a798-e77514c152e6",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=[abc]&value=[[abc123]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[abc]"
								},
								{
									"key": "value",
									"value": "[[abc123]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ab85280-b118-4464-b545-94e9c4c12b2d",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=[id]&value=[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Attribute SingleProperty MultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31a9f7ee-bf14-4362-8917-e47c069f914c",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=[id]&value=[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,  datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Chandani Square_25]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,  datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Chandani Square_25]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute SingleProperty InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16569ac8-1045-4fb2-a10e-cb16349538bf",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=[id]&value=[[non-existing-id]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[non-existing-id]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute SingleProperty MultiValue with InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9c0aa54-7f8e-48dd-9445-c9897402ce4c",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=\"[id]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\"",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[id]\""
								},
								{
									"key": "value",
									"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute Nested-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "482aa3d0-4d7a-41ae-88ad-0d463d86ec7d",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=\"[tags,deviceId.keyword]\"&value=\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\"",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags,deviceId.keyword]\""
								},
								{
									"key": "value",
									"value": "\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute Nested-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a8c77ec-4749-4dfc-b6ae-26c23b5faf87",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags,location.address]\""
								},
								{
									"key": "value",
									"value": "\"[[aqm, flood], [pune,delhi]]\""
								},
								{
									"key": "filter",
									"value": "[deviceModelInfo.name]",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute InvalidProperty (totalHits=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c3af4fb-72de-41e3-8647-06d522ac42c5",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?property=\"[non-existing property]\"&value=\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[non-existing property]\""
								},
								{
									"key": "value",
									"value": "\"[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count based on Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e985d498-33ac-45e8-a086-1484f9216b91",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?q=\"Bosch Climo\"",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": "\"Bosch Climo\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Text using SpecialChar[*]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cff6874d-9799-424f-ac77-b64634ee9a16",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?q=\"Bosch*\"",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": "\"Bosch*\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Text InvalidSyntax-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64b78b85-9043-404a-af16-1ec05e491ff5",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?q=.\"dss$%fdd&\"&limit=50&offset=100",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": ".\"dss$%fdd"
								},
								{
									"key": "\"",
									"value": null
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Text InvalidSyntax-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9117f17b-c67b-4a73-b10d-0a6e5f3bfb72",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?abc123=\"text to search\"&limit=50&offset=100",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abc123",
									"value": "\"text to search\""
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f6fc81f-6d76-4e0c-b1f5-187cf49ac3d6",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.9,18.6]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.9,18.6]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "723e18f3-22fb-4d5d-b71a-8c9cbcf381b8",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "abc"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.927285,18.502712]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "941cf553-0b85-43dc-869a-dde50467755f",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}{{base}}/count?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.927285,18.502712]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Polygons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cbba132-2ea4-4c5b-a114-735f58d4705e",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Polygon",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1750269-8b9e-4942-911c-4fc865c1d5a8",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "abclocation"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Polygon",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec1f52c2-bfa5-404d-933e-ceeb1a49a651",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}{{base}}/count?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d13928d-6c66-42e5-9ec2-7d322b6e70a5",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78eb7adb-14e2-48b9-88fd-f1ae8f6cfa7b",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "abclocation"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d5f07fe-ba1d-40bb-b19f-50e273063f07",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42e76101-4f21-4459-b4a6-96c8cfab9cd2",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73,20],[75,18]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73,20],[75,18]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d57a44dd-30ef-49c3-8c42-ef0bb844cb2e",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location1"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e945ed64-ed06-496e-8321-89ba8617a6e2",
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}{{base}}/count?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
							"protocol": "https",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geopropertyabc",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}