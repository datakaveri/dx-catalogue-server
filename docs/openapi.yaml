openapi: 3.0.2
info:
    title: Data Exchange Catalogue Server APIs
    version: 4.5.0
    description: >
        # Introduction
        
        The Catalogue is DXs' (Data Exchange) dataset discovery portal and metadata store. 

        It enables *Providers* of datasources to describe them with DX based annotations

        to make discovery and consumption of data both automatable and semantically describable. 

        For search and discovery, it allows users to search through text and geo-based queries.

        The catalogue is a [JSON-LD](https://json-ld.org/) document stored and based on the
        [RDF](https://www.w3.org/RDF/) information exchange model. 
        
        
        # Configurations
        
        - **Server**: 
          - In the doc, we display the server url to be https://example-cat.com with the hostname as example-cat.com
          - This could be configured according to the deployment
        - **Base path**:
          - Base path is the path on which API is served, relative to the host
          - It is the initial part of the API
          - The base path for [DX AAA Server](https://github.com/datakaveri/iudx-aaa-server) is set to `/auth/v1`
          - Currently, `/iudx/cat/v1` is being used as base path for all the DX Catalogue Server APIs
          - These value could be configured according to the deployment
        - **Request Samples**:
          - The `<tokeValue>` in the header of request sample could be replaced with respective token value that could be obtained from DX Auth Server
          - The `<payload>` in the request sample could be replaced with the payload given adjacent to the request sample
          - The payload contains `<some_item_id>`, `<provider_id>`, `<some_item_name>`, for which the appropriate values could be added 
        
         # API HTTP Responses
        Apart from the response codes specified in each API,

        the API server may respond with certain 4xx and 5xx error codes which are related to common API
        Gateway behaviours.

        The application should address them accordingly.
    contact:
        name: For support contact IUDX Team at
        email: support@iudx.org.in
servers:
    -  url: 'https://example-cat.com/iudx/cat/v1'
       description: Production Instance

paths:
    /search:
        get:
            tags:
                - Discovery
            parameters:
                -
                    name: property
                    description: >
                        Array of properties (strings) on which query is to be made. A logical "and" is
                        performed between the properties. Only a maximum of 4 properties are allowed to be
                        queried at once. The mapping between a property and a value is one-to-one. The only
                        allowed properties to be queried are per the vocabulary schema mentioned in each
                        sub-Class of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).
                    schema:
                        maxItems: 4
                        minItems: 1
                        uniqueItems: true
                        type: array
                        items:
                            type: string
                    in: query
                -
                    name: value
                    description: >
                        Values of the one-to-one mapped strings in property. A logical "or" is performed for
                        each value which is mapped to a property. For each property, only a maximum of 4
                        values are allowed. For e.g for property=[id,type] then value=[[<some-id>],
                        [<some-type>]].
                    schema:
                        maxItems: 4
                        minItems: 1
                        uniqueItems: true
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: geoproperty
                    description: Name of the property if the query is on a geospatial property.
                    schema:
                        enum:
                            - location
                            - geocovers
                        type: string
                    in: query
                -
                    name: georel
                    description: Type of geoquery
                    schema:
                        enum:
                            - within
                            - intersects
                        type: string
                    in: query
                    required: false
                -
                    name: geometry
                    description: Geometry of the geo-query
                    schema:
                        enum:
                            - Point
                            - Polygon
                            - LineString
                            - bbox
                        type: string
                    in: query
                -
                    name: coordinates
                    description: >
                        Coordinates for the specific query type. For e.g, [[1,2], [3,4]]. Note: The data-type
                        of this field is a string, therefore the coordinates are a string encoded
                        multidimensional array.Precision supported is 6 decimal places.
                    schema:
                        format: double
                        maxItems: 10
                        minItems: 1
                        type: array
                        items:
                            type: number
                    in: query
                    required: false
                -
                    name: maxDistance
                    description: Maximum distance from center point in meters
                    schema:
                        maximum: 10000
                        minimum: 0
                        type: number
                    in: query
                    required: false
                -
                    name: q
                    description: query for text/fuzzy search.
                    schema:
                        maxLength: 100
                        minLength: 1
                        type: string
                    in: query
                    required: false
                -
                    name: limit
                    description: Limit number of records in search response.
                    schema:
                        maximum: (10000 - offset)
                        minimum: 1
                        type: integer
                    in: query
                    required: false
                -
                    name: offset
                    description: Offset from where the next batch of results should be returned.
                    schema:
                        maximum: (9999 - limit)
                        type: integer
                    in: query
                    required: false
                -
                    name: filter
                    description: Filter properties to display. This is an array of strings.
                    schema:
                        maxItems: 10
                        minItems: 0
                        type: array
                        items:
                            type: string
                    in: query
                -
                    name: instance
                    description: >
                        DX instance on which this query is to be made. Don't mention this if search on
                        entire catalogue is to be made. Else mentioning a specific instance name here
                        restricts search only to that instance.
                    schema:
                        type: string
                        example: 'pune, surat, varanasi'
                    in: header
                    required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: All the query parameters yielded results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForDiscovery'
                            examples:
                                Invalid Query Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidQueryParam'
                                        title: Generic invalid query param error
                                Invalid Geo Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidGeoParam'
                                        title: Geoquery parameter error
                                Invalid Geo Value:
                                    value:
                                        type: 'urn:dx:cat:InvalidGeoValue'
                                        title: Geoquery value error
                                Invalid Syntax:
                                    value:
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                                Operation not allowed:
                                    value:
                                        type: 'urn:dx:cat:OperationNotAllowed'
                                        title: Operation not allowed
                    description: Bad Request
            operationId: search
            description: >
                Generic catalogue search query. Searches for entites that meet the

                query criteria. The search enpoint allows one to query a particular property of an

                entity, or by its geo-location annotation, or by a full text-search or a combination of

                all three.

                #### Property Search

                One may combine multiple properties in a search through a logical "&". For each such property

                multiple possible values may be given. The syntax for a property query is -

                `property=[<prop-1>,<prop-2>]&value=[[<prop-1-val-1>,<prop-1-val-2>],[<prop-2-val-1>]]`

                Property search can be applied to only certain properties. These properties defined in the
                DX Schema Vocalbulary for all subClasses of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity)

                These perform exact matches in the case of keywords such as

                `id`, `resourceGroup`, `provider`, `resourceServer`, `type`

                and approximate matches (text based) for all other properties.

                Some common uses are 
                  - tags: `property=[tags]&value=[[aqm,pollution]]`
                  - by type of entity: `property=[type]&value=[[iudx:ResourceGroup]]`. Valid entities are `iudx:Resource`, `iudx:ResourceGroup`, `iudx:Provider`, `iudx:ResourceServer`.
                  - a combination: `property=[tags,type]&value=[[aqm,pollution], [iudx:ResourceGroup]]
                  - resource belonging to a group: `property=[resourceGroup]&value=[[<group-id>]]`

                #### Geo Search

                Geo search accepts geojson based queries. The params and their accepted values are -
                  - geoproperty: Which geoproperty to query. Default is `location`.
                  - georel: Geo-relationship. One of `within`, `disjoint`, `intersects`.
                  - geometry: GeoJson geometries. One of `Point`(point and circle), `Polygon`, `LineString`(for interseaction with points and polygons), `bbox`.
                      - Point: Point and radius query
                          - coordinates: The center point of the circle, for e.g, `[73,13]` (lon and lat)
                          - maxDistance: Radius from the center point in meters, for e.g `100`
                          - georel: `within`
                      - Polygon: Polygon/Multi-Polygon query
                          - coordinates: Coordinates of the polygon/s, for e.g, `[[[73,13],[73,12],[73,13]]]`.  Note, (lon and lat) and the first coordinate must be same as last.
                          - georel: `within, intersects, disjoint`
                      - LineString: Multi line string
                          - coordinates: Coordinates of the multi-line, for e.g, `[[73,13],[74,15],[75,16]]`. 
                          - georel: `intersects`
                      - bbox: Bounding box
                          - coordinates: `[[top-left],[bottom-right]]`, `[[73,13],[74,12]]`. 
                          - georel: `within`

                #### Text search

                This is a fuzzy full text based search. It searches across all entity types.
                  - q: Text to be queried

                #### Complex search

                A combination of the above is allowed to make searches more  complex.


                #### Limits and filters
                  - Documents returned can be limited by specifying a limit and offset. For e.g, `limit=100&offset=10` gives 100 documents from the 10th search result.
                  - A subset of properties of returned documents can be filtered out. For e.g, `filter=[id]` returns documents with only the `id` property retained in them.
                  - The sum of `offset` and `limit` should `<= 10000`, i.e. if the `offset=100`, then max `limit` should be `9900` and so on.
            x-codeSamples:
                -
                    lang: cURL
                    label: 'tag search'
                    source: |
                        curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?property="[tags]"&value="[[pollution]]"&filter=[id,tags]&limit=100&offset=0'
                -
                    lang: cURL
                    label: 'search by circle'
                    source: |
                        curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]'
                - lang: cURL
                  label: 'search by polygon'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]'
                - lang: cURL
                  label: 'search by linestring'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]'
                - lang: cURL
                  label: 'search by bbox'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8420,18.5305],[73.8665,18.5126]]'
                -
                    lang: cURL
                    label: 'search by text'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/search?q="Bosch Climo"'
                -
                    lang: cURL
                    label: 'complex search'
                    source: |
                        curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]'
    /count:
        get:
            tags:
                - Discovery
            parameters:
                - name: property
                  description: |
                      Array of properties (strings) on which query is to be made. A logical "and" is
                      performed between the properties. Only a maximum of 4 properties are allowed to be
                      queried at once. The mapping between a property and a value is one-to-one. The only
                      allowed properties to be queried are per the vocabulary schema mentioned in each
                      sub-Class of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).
                  schema:
                      maxItems: 4
                      minItems: 1
                      uniqueItems: true
                      type: array
                      items:
                          type: string
                  in: query
                - name: value
                  description: |
                      Values of the one-to-one mapped strings in property. A logical "or" is performed for
                      each value which is mapped to a property. For each property, only a maximum of 4
                      values are allowed. For e.g for property=[id,type] then value=[[<some-id>],
                      [<some-type>]].
                  schema:
                      maxItems: 4
                      minItems: 1
                      uniqueItems: true
                      type: array
                      items:
                          type: string
                  in: query
                  required: false
                - name: geoproperty
                  description: Name of the property if the query is on a geospatial property.
                  schema:
                      enum:
                          - location
                          - geocovers
                      type: string
                  in: query
                - name: georel
                  description: Type of geoquery
                  schema:
                      enum:
                          - within
                          - intersects
                      type: string
                  in: query
                  required: false
                - name: geometry
                  description: Geometry of the geo-query
                  schema:
                      enum:
                          - Point
                          - Polygon
                          - LineString
                          - bbox
                      type: string
                  in: query
                - name: coordinates
                  description: |
                      Coordinates for the specific query type. For e.g, [[1,2], [3,4]]. Note: The data-type
                      of this field is a string, therefore the coordinates are a string encoded
                      multidimensional array.Precision supported is 6 decimal places.
                  schema:
                      format: double
                      maxItems: 10
                      minItems: 1
                      type: array
                      items:
                          type: number
                  in: query
                  required: false
                - name: maxDistance
                  description: Maximum distance from center point in meters
                  schema:
                      maximum: 10000
                      minimum: 0
                      type: number
                  in: query
                  required: false
                - name: q
                  description: query for text/fuzzy search.
                  schema:
                      maxLength: 100
                      minLength: 1
                      type: string
                  in: query
                  required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: All the query parameters yielded results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForDiscovery'
                            examples:
                                Invalid Query Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidQueryParam'
                                        title: Generic invalid query param error
                                Invalid Geo Value:
                                    value:
                                        type: 'urn:dx:cat:InvalidGeoValue'
                                        title: Geoquery value error
                                Invalid Syntax:
                                    value:
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                    description: Bad query
            operationId: count
            description: >
                Count APIs get the total number of hits for the given API request containing the provided query parameters.
            x-codeSamples:
                - lang: cURL
                  label: 'count tags'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?value=[[pollution]]&property=[tags]'
                - lang: cURL
                  label: 'count by circle'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.9,18.6]'
                - lang: cURL
                  label: 'count by polygon'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]'
                - lang: cURL
                  label: 'count by linestring'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]'
                - lang: cURL
                  label: 'count by bbox'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73,20],[75,18]]'
                - lang: cURL
                  label: 'count by text'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/count?q="Bosch Climo"'

    /geo:
        description: >
            It gets the country, region, county,locality, borough and coordinates of the places that match with the parameter value and have the confidence of 1.
        get:
            tags:
                - Discovery
            parameters:
                - name: q
                  description: location for which information is needed.
                  schema:
                      type: string
                  in: query
                  required: true
            operationId: get-geolocations
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForGeoLocations'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForDiscovery'
                            examples:
                                Invalid Query Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidParamValue'
                                        title: Generic invalid query param error
                                        detail: failed
                                Invalid Geo Value:
                                    value:
                                        type: 'urn:dx:cat:InvalidGeoValue'
                                        title: Geoquery value error
                                        detail: failed
                    description: Bad request

            description: >
                List of all geolocations that match with value in parameter having maximum confidence
            x-codeSamples:
                - lang: cURL
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/geo?q=malleswaram'
    
    

    /list/{type}:
        description: >
            List entities of a certain type or list all possible values of a property(tags only). 

            If entites, then type must be `resourceGroup`, `resourceServer`, `provider`.

            If properties then only `tags` is supported.

            All documents in the catalogue are of type [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).

            The entities referenced as the name mentioned in above link in camel case with small case
            starting.

            This endpoint essentially lists those entities (except Resource which will be too numerous. In
            addition, you may also list all the instances by 

            specifying instance instead of an entity identified.

            Adding `instance` in header will restrict the list to only that specific instance.
        get:
            tags:
                - List
            parameters:
                -
                    name: instance
                    description: >
                        DX instance on which this query is to be made. Don't mention this is list on entire
                        catalogue is to be made. Else mentioning a specific instance name here restricts
                        search only to that instance.
                    schema:
                        type: string
                        example: 'pune, surat, varanasi'
                    in: header
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/listTypesSuccessResponse'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/listTypesErrorResponse'
                    description: Bad Request
            operationId: list-types
            description: List a particular type
            x-codeSamples:
                -
                    lang: cURL
                    label: 'list by tags'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/tags'

                - lang: cURL
                  label: 'list by instance'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/instance'

                -
                    lang: cURL
                    label: 'list by resourceGroup'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/resourceGroup'

                - lang: cURL
                  label: 'list by resourceServer'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/resourceServer'
                -
                    lang: cURL
                    label: 'by provider'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/provider'
        parameters:
            -
                name: type
                description: |
                    If entites, then type must be resource, resourceGroup, resourceServer, provider. If
                    properties then only tags is supported. Additionally all instances can also be mentioned
                    as `instance`.
                schema:
                    maxLength: 50
                    minLength: 4
                    enum:
                        - tags
                        - resourceServer
                        - resourceGroup
                        - instance
                        - provider
                    type: string
                in: path
                required: true
            -
                name: instance
                description: |
                    DX instance on which this query is to be made. Don't mention this if list on entire
                    catalogue is to be made. Else mentioning a specific instance name here restricts search
                    only to that instance.
                schema:
                    type: string
                in: header
                required: false
    /item:
        description: >
            Operations on a specific catalogue entity. This endpoint is used to create/update/read/delete a
            catalogue DX Entity.
        get:
            tags:
                - Entity
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Found the item.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForGetEntity'
                    description: Didn't find the item.
            operationId: get-item
            description: Get an item given the id
            x-codeSamples:
                -
                    lang: cURL
                    label: 'item by id'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_2811'
        put:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exapmleEntityWId'
                required: true
            tags:
                - Entity
            parameters:
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/updateItemResponse'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/updateItemBadRequest'
                    description: Bad Request
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Unauthorized:
                                    value:
                                        type: 'urn:dx:cat:InvalidAuthorizationToken'
                                        title: Token is invalid
                                        detail: failed
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/updateItemNotFound'
                    description: Document doesn't exist to update it
            operationId: update-item
            description: >
                Update an item where the body contains a fully valid item with id. Relationship links like

                provider, resourceGroup, resourceServer and "name" are not allowed to be updated. itemStatus
                is added by backend.

                Items maybe subClasses of type [IUDXEntity](https://voc.iudx.org.in/IUDXEntity). Depedning on
                this, some properties maybe mandatory.

                The json schema for the different types can be found
                [here](https://github.com/datakaveri/iudx-catalogue-server/tree/master/src/main/resources/iudx/catalogue/server/validator).
                In the future, we will serve schemas from our own servers.

                #### Non-updateable fields

                In case update of these fields is required, it is recommended to delete the item

                and re-upload it.

                1. iudx:Resource
                   - id
                   - provider
                   - resourceGroup
                   - name 
                   - type (1st element in array non-modifiable)
                   - itemStatus

                2. iudx:ResourceGroup
                   - id
                   - name
                   - provider
                   - resouceServer
                   - type (1st element in array non-modifiable)
                   - itemStatus
                
                3. iudx:ResourceServer
                   - id
                   - provider
                   - type (1st element in array non-modifiable)
                   - itemStatus
                
                4. iudx:Provider
                   - id
                   - type (1st element in array non-modifiable)
                   - itemStatus
            x-codeSamples:
                -
                    lang: cURL
                    label: 'update item'
                    source: |
                        curl --location --request PUT 'https://example-cat.com/iudx/cat/v1/item/' \
                        --header 'token: <tokenValue>' \
                        --header 'Content-Type: application/json' \
                        --data-raw '<payload>'
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleEntityWoID'
                required: true
            tags:
                - Entity
            parameters:
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                            examples:
                                Create Success:
                                    value:
                                        type: 'urn:dx:cat:Success'
                                        results:
                                            -
                                                id: >
                                                    datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io
                                                method: update
                                                title: 'urn:dx:cat:Success'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Schema Validation Failure:
                                    value:
                                      {
                                          "type": "urn:dx:cat:InvalidSchema",
                                          "title": "Invalid Schema",
                                      }
                                Link Validation Failure:
                                    value:
                                        type: 'urn:dx:cat:LinkValidationFailed'
                                        title: Link Validation Failed
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Unauthorized:
                                    value:
                                        type: 'urn:dx:cat:InvalidAuthorizationToken'
                                        title: Token is invalid
                                        detail: failed
                    description: Unauthorized access
            operationId: create-item
            description: >
                Insert an item into the catalogue where the item's body specifies the type of item and
                instance name. id and itemStatus are added by server. Items maybe subClasses of type
                [IUDXEntity](https://voc.iudx.org.in/IUDXEntity). Depedning on this, some properties maybe
                mandatory. The json schema for the different types can be found
                [here](https://github.com/datakaveri/iudx-catalogue-server/tree/master/src/main/resources/iudx/catalogue/server/validator).
                In the future, we will serve schemas from our own servers.
            x-codeSamples:
                -
                    lang: cURL
                    label: 'create item'
                    source: |
                        curl --location --request POST 'https://example-cat.com/iudx/cat/v1/item/' \
                        --header 'token: <tokenValue>' \
                        --header 'Content-Type: application/json' \
                        --data-raw '<payload>'
        delete:
            tags:
                - Entity
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                            examples:
                                Delete Success:
                                    value:
                                      {
                                          "type": "urn:dx:cat:Success",
                                          "title": "Success",
                                          "results": [
                                              {
                                                  "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2",
                                                  "method": "delete",
                                                  "title": "urn:dx:cat:Success"
                                              }
                                          ]
                                      }
                    description: Successfully deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Didn't find the item
            operationId: delete-item
            description: Delete an item
            x-codeSamples:
                -
                    lang: cURL
                    label: 'delete item'
                    source: |
                        curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/item?id=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2' \
                        --header 'token: <tokenValue>'

    /relsearch:
        description: |
            Catalogue relationship search. This is much like normal search except the query explores
            properties that resides inside a related entity.

            For e.g, for  a Resource entity -> Doc A - {id: some-id, provider: example-provider-id}, and
            Provider entity -> Doc B- {id: example-provider-id, name: some-name},

            this api allows you to make a query saying provider.name=some-name which will return Doc A.
        get:
            tags:
                - Relationship
            parameters:
                -
                    name: relationship
                    description: |
                        Relationship attribute on which the query is to be made. For
                        e.g, entities whose related provider entity's name needs to match xyz will
                        have this field as "[provider.name]". The relationship is enclosed in [].
                        If there are two relationships, then they must be comma separated. For e.g,
                        [provider.name, resourceGroup.name].
                    schema:
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: value
                    description: |
                        Value of the relationhsip. Multiple values for a single relationship are supported,
                        for e.g, [[val1, val2]].

                        If multiple relationships are specified, then their values will occur as so -
                        [[rel1-val1],[rel2-val1]]
                    schema:
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: instance
                    description: |
                        DX instance on which this query is to be made. Don't mention this if relsearch on
                        entire catalogue is to be made. Else mentioning a specific instance name here
                        restricts search only to that instance.
                    schema:
                        maxLength: 100
                        minLength: 0
                        type: string
                        example: 'pune, surat, varanasi'
                    in: header
                    required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Success Response
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/relSearchErrorResponse'
                    description: Bad request
            operationId: relationship-search
            description: 'Search related items in the catalogue '
            x-codeSamples:
                -
                    lang: cURL
                    label: 'search inside relationship'
                    source: |
                        curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/relsearch?relationship="[provider.name]"&value="[[IUDXAdmin]]"'
    /relationship:
        get:
            description: >
                This API allows one to retrieve documents which are connected by certain relationship attribute in
                an entity. It allows one to fetch an entity/entities that are immediate neighbor(s) of the input
                entity.
                
                To explain this API better we provide an illustrative catalogue graph connecting different
                catalogue entities below: 
                
                ```
                                          forward relationship
                                       ───────────────────►
                
                                                                         ┌─────────────────┐
                ┌───────────────┐                              provider  │                 │
                
                │               │ resourceGroup                    ┌─────►Provider PA      │
                
                │ Resource A    ├─────┐                            │     │                 │
                
                │               │     │    ┌─────────────────┐     │     └─────────────────┘
                
                └───────────────┘     │    │ ResourceGroup   ├─────┘
                                      └────► RG1             │
                ┌───────────────┐          │                 │
                
                │               │      ┌───►                 ├─────┐    ┌─────────────────┐
                
                │ Resource B    │      │   └─────────────────┘     │    │                 │
                
                │               ├──────┘                           │    │ResourceServer RS│
                
                └───────────────┘  resourceGroup                   └────►                 │
                                                                        └─────────────────┘
                                                           resourceServer
                
                
                
                                       ◄────────────────────
                                           inverse relationship
                ```   
                
                Given a resource item, say Resource A, one may want to retrieve the resource group item associated
                with it. Similarly, given a resource group item, say RG1, one may want to retrieve all resource
                entities that belong to this resource group. In the above example, the API should return resource
                entities A and B.
                
                The following table shows applicable queries for different entities.
                
                
                
                | Type of the entity (id) | Supported relationships for "rel"       |
                Description                                             |
                
                |-------------------------|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|
                
                | Resource                | resourceGroup,resourceServer,  provider | Return the associated
                resourceGroup (or resourceServer or provider) entity. Only single entity is returned.             
                
                | ResourceGroup           | resource                                | Return all resource items
                associated with the input resource group. Multiple entities may be returned.                      
                |
                
                | ResourceGroup           | resourceServer, provider                | Return the associated
                resourceServer (or provider) entity. Only single entity is returned.                              
                |
                
                | Provider                | resource, resourceGroup                 | Return all resource or
                resource group items associated with the input provider. Multiple entities maybe
                returned.                  |
                
                | ResourceServer          | resource, resourceGroup                 | Return all resource or
                resource group items associated with the input resource server. Multiple entities maybe
                returned.           |
            
            

            tags:
                - Relationship
            parameters:
                -
                    name: rel
                    description: Relationship attribute of the entity whose id is provided
                    schema:
                        enum:
                            - provider
                            - resourceGroup
                            - resourceServer
                            - instance
                        type: string
                    in: query
                    required: true
                -
                    name: id
                    description: id of the entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForRelationship'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForRelationship'
                            examples:
                                Invalid Query Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidQueryParam'
                                        title: Generic invalid query param error
                                Invalid Syntax:
                                    value:
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                                Invalid Filter error:
                                    value:
                                        type: 'failed'
                                        title: The max number of filter should be 10
                                Invalid limit and offset:
                                    value:
                                        type: 'failed'
                                        title: The limit + offset should be between 1 to 10000
                    description: Bad Request
            operationId: get-related-entity
            x-codeSamples:
                -
                    lang: cURL
                    label: 'search by provider relationship'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/relationship?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo&rel=provider'
        parameters:
            -
                name: id
                description: ID of the entity
                schema:
                    type: string
                in: query
                required: true
            -
                name: rel
                description: Relationship attribute of the entity whose id is provided
                schema:
                    type: string
                in: query
                required: true
            -
                name: instance
                description: |
                    DX instance on which this query is to be made. Don't mention this if relationship search
                    on entire catalogue is to be made. Else mentioning a specific instance name here restricts
                    search only to that instance.
                schema:
                    type: string
                in: header
                required: false
    /instance:
        description: >
            A catalogue administrator API to set an instance (grouping) which will be reflected on the
            catalogue UI.
        post:
            tags:
                - Administrator
            parameters:
                -
                    name: id
                    description: |
                        `id` of the instance. In most cases this is a city name.
                    schema:
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true

            x-codeSamples:
                - lang: 'cURL'
                  label: 'create instance'
                  source: |
                      curl --location --request POST 'https://example-cat.com/iudx/cat/v1/instance?id=Bengaluru' \
                      --header 'token: <tokenValue>' \
                      --data-raw ''

            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseCreateInstance'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForCreateInstance'
                    description: Bad Request
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            operationId: create-instance
            description: Create an DX instance

    /list/instance:
        description: >
            Get instance
        get:
            tags:
                - Administrator
            x-codeSamples:
                - lang: 'cURL'
                  label: 'create instance'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/instance'

            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForGetInstance'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForCreateInstance'
                    description: Bad Request
            operationId: get-instances
            description: This API gets the list of instances from the DX Catalogue Server

        delete:
            tags:
                - Administrator
            parameters:
                -
                    name: id
                    description: |
                        id of the instance. In most cases this is a city name.
                    schema:
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        type: string
                    in: header
                    required: true

            x-codeSamples:
                - lang: 'cURL'
                  label: 'delete instance'
                  source: |
                      curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/instance?id=Bengaluru' \
                      --header 'token: <tokenValue>'

            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForDeleteInstance'
                    description: Successfully deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForDeleteInstance'
                    description: Instance doesn't exist
            operationId: delete-instance
            description: Delete an DX instance
    /consumer/ratings:
        servers:
            - url: 'https://example-cat.com/'
              description: Production Instance

        description: >
            A catalogue consumer api to assign rating/review to a resource item, which will be reflected on the ui.

        post:
            tags:
                - Consumer
            operationId: create-rating-object
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleRating'
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForConsumerRating'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForConsumerRating'
                            examples:
                                Invalid Schema:
                                    value:
                                        type: 'urn:dx:cat:InvalidSchema'
                                        title: Invalid Schema
                                Invalid Access Count:
                                    value:
                                        type: 'urn:dx:cat:AccessDenied'
                                        title: Resource usage requirements not satisfied
                                        detail: User has to access resource at least 2 times to give rating
                    description: Bad Request
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: >
                Create a rating object for a resource item.
                
                  ` A consumer can provide a rating for a resource item only if they have queried the resource from the DX Resource Server a min number of times. For eg: 100 API calls. `
            x-codeSamples:
                -
                    lang: cURL
                    label: 'create rating'
                    source: |
                        curl --location --request POST 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta' \
                        --header 'token: <tokenValue>' \
                        --header 'Content-Type: application/json' \
                        --data-raw '<payload>'
        

        put:
            tags:
                - Consumer
            operationId: update-rating-object
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleRating'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForUpdateRating'
                    description: Successfully updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForUpdateRating'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: Update a rating object of a resource item
            x-codeSamples:
                -
                    lang: cURL
                    label: 'update rating'
                    source: |
                        curl --location --request PUT 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta' \
                        --header 'token: <tokenValue>' \
                        --header 'Content-Type: application/json' \
                        --data-raw '<payload>'
        get:
            tags:
                - Consumer
            operationId: get-ratings
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
                -
                    name: type
                    description: Get all ratings or average rating based on type
                    schema:
                        enum:
                            - average
                            - group
                        type: string
                    in: query
                    required: false
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: false

            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseGetRating'
                    description: Success
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: >
                Get a rating, all ratings or average rating for a resource or for a resource group
            x-codeSamples:

                -
                    lang: cURL
                    label: 'get all rating of resource'
                    source: |
                        curl --location --request GET 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta&type=group'
                -
                    lang: cURL
                    label: 'get average rating of resource'
                    source: |
                        curl --location --request GET 'https://example-cat.com/consumer/ratings?id=datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.io/pune-env-flood&type=average'
        delete:
            tags:
                - Consumer
            operationId: delete-rating-object
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true

                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true


            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForDeleteRatingObject'
                    description: Success
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: delete a rating object for a resource item
            x-codeSamples:
                -
                    lang: cURL
                    label: 'delete rating'
                    source: |
                        curl --location --request DELETE 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta' \
                        --header 'token: <tokenValue>'
    

    /internal/ui/instance:
        servers:
            - url: 'https://example-cat.com/'
              description: Production Instance

        description: >
            A catalogue administrator API to set a middle layer instance, which will be reflected on the catalogue UI.
            **Instance APIs** : Instance refers to the name of the city/location. 
                            Instance API creates, updates, deletes and lists the name, icon, cover and logo of each instance.
        post:
            tags:
                - Mlayer - Instance
            parameters:
                -
                    name: token
                    description: A valid DX Authorization token
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            requestBody:
                description: Create a new Instance using name, cover, icon, logo.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleInstance'
                required: true
            operationId: create-instance
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForCreatingInstance'
                    description: Success
                '400':

                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForCreatingInstance'
                    description: Bad Request
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access

            x-codeSamples:
                -
                    lang: cURL
                    label: 'create instance'
                    source: |
                        curl --location --request POST 'https://example-cat.com/iudx/cat/v1/internal/ui/instance' \
                        --header 'token: <tokenValue>' \
                        --header 'Content-Type: application/json' \
                        --data-raw '<payload>'

        put:
            tags:
                - Mlayer - Instance
            parameters:
                - name: id
                  description: |
                      `id` of the instance to be updated
                  schema:
                      type: string
                  in: query
                  required: true

                - name: token
                  description: Authorization token
                  schema:
                      maxLength: 512
                      minLength: 0
                      pattern: '^[a-zA-Z0-9\/\@\.]*$'
                      type: string
                  in: header
                  required: true


            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleInstance'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForUpdatingInstance'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForCreatingInstance'
                    description: Bad Request
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            operationId: update-instance
            description: Update the instance of the middle layer
            x-codeSamples:
                - lang: cURL
                  label: 'update instance'
                  source: |
                      curl --location --request PUT 'https://example-cat.com/iudx/cat/v1/internal/ui/instance?instanceId=191e35e3-99c2-43a5-ba8d-811a756b08de' \
                      --header 'token: <tokenValue>' \
                      --header 'Content-Type: application/json' \
                      --data-raw '<payload>'

        get:
            tags:
                - Mlayer - Instance
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForGettingInstance'
                    description: Success
            operationId: get-instance
            description: >
                Get list of all Instances
            x-codeSamples:
                - lang: cURL
                  label: 'get instance'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/instance'

        delete:
            tags:
                - Mlayer - Instance
            parameters:
                - name: id
                  description: |
                      `id` of the Instance to be deleted.
                  schema:
                      type: string
                  in: query
                  required: true
                - name: token
                  description: Authorization token
                  schema:
                      maxLength: 512
                      minLength: 0
                      pattern: '^[a-zA-Z0-9\/\@\.]*$'
                      type: string
                  in: header
                  required: true
            operationId: delete-instance
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForDeletingInstance'
                    description: Success
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: delete an instance using id parameter
            x-codeSamples:
                - lang: cURL
                  label: 'delete instance'
                  source: |
                      curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/internal/ui/instance?instanceId=191e35e3-99c2-43a5-ba8d-811a756b08de' \
                      --header 'token: <tokenValue>'


    /internal/ui/domain:
        description: >
            A catalogue administrator API to set a middle layer domain, which will be reflected on the catalogue UI.
        post:
            tags:
                - Mlayer - Domain
            parameters:
                - name: token
                  description: A valid DX Authorization token
                  schema:
                      maxLength: 512
                      minLength: 0
                      pattern: '^[a-zA-Z0-9\/\@\.]*$'
                      type: string
                  in: header
                  required: true
            requestBody:
                description: Create a new domain using name, label, icon, description.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleDomain'
                required: true
            operationId: create-domain
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForCreatingDomain'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForCreatingInstance'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: >
                Create a new Data model Domain
            x-codeSamples:
                - lang: cURL
                  label: 'create domain'
                  source: |
                      curl --location --request POST 'https://example-cat.com/iudx/cat/v1/internal/ui/domain' \
                      --header 'token: <tokenValue>' \
                      --header 'Content-Type: application/json' \
                      --data-raw '<payload>'

        put:
            tags:
                - Mlayer - Domain
            parameters:
                - name: id
                  description: |
                      `id` of the data model domain, to be updated
                  schema:
                      type: string
                  in: query
                  required: true

                - name: token
                  description: Authorization token
                  schema:
                      maxLength: 512
                      minLength: 0
                      pattern: '^[a-zA-Z0-9\/\@\.]*$'
                      type: string
                  in: header
                  required: true
            operationId: update-domain


            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleDomain'
                required: true
                description: name, label, icon and description can be updated.

            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForUpdatingDomain'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForCreatingInstance'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: Update the data model domain of the middle layer
            x-codeSamples:
                - lang: cURL
                  label: 'update domain'
                  source: |
                      curl --location --request PUT 'https://example-cat.com/iudx/cat/v1/internal/ui/domain?domainId=3d73067f-2855-4155-b918-14d621b7a576' \
                      --header 'token: <tokenValue>' \
                      --header 'Content-Type: application/json' \
                      --data-raw '<payload>'

        get:
            tags:
                - Mlayer - Domain
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForGettingDomain'
                    description: Success
            operationId: get-domain
            description: >
                Get list of all Data-model Domains.
            x-codeSamples:
                - lang: cURL
                  label: 'get domain'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/domain'

        delete:
            tags:
                - Mlayer - Domain
            parameters:
                - name: id
                  description: |
                      `id` of the Domain to be deleted.
                  schema:
                      type: string
                  in: query
                  required: true
                - name: token
                  description: Authorization token
                  schema:
                      maxLength: 512
                      minLength: 0
                      pattern: '^[a-zA-Z0-9\/\@\.]*$'
                      type: string
                  in: header
                  required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForDeletingDomain'
                    description: Success
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
            description: delete a data model domain
            operationId: delete-domain
            x-codeSamples:
                - lang: cURL
                  label: 'delete domain'
                  source: |
                      curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/internal/ui/domain?domainId=3d73067f-2855-4155-b918-14d621b7a576' \
                      --header 'token: <tokenValue>'                 

    /internal/ui/providers:
        description: >
            A catalogue API to list all providers, which will be reflected on the catalogue UI.
        get:
            tags:
                - MLayer
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForUIProvider'
                    description: Success
            operationId: UI-providers
            description: >
                A catalogue API to list all providers, which will be reflected on the catalogue UI.
            x-codeSamples:
                - lang: cURL
                  label: 'get providers'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/providers'

    /internal/ui/geoquery:
        post:
            tags:
                - MLayer
            requestBody:
                description: id's of the dataset belonging to instance whose location is needed.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleReqBodyMapView'
                required: true
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForGettingGeoquery'
                    description: Successfully inserted
                400:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForCreatingInstance'
                    description: Invalid document
            operationId: UI-geoquery
            description: >
                A catalogue API to get location of all resource groups whose id(s) are provided, which will be reflected on the catalogue UI.
            x-codeSamples:
                - lang: cURL
                  label: 'get geoquery'
                  source: |
                      curl --location 'https://example-cat.com/iudx/cat/v1/internal/ui/geoquery'

    /internal/ui/dataset:
        description: >
            A catalogue API to fetch details of the dataset, which will be reflected on the catalogue UI.
        get:
            tags:
                - Mlayer - Dataset
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForGettingDatasets'
                    description: Successfully inserted
            operationId: UI-dataset
            description: >
                Fetches details of all the datasets.
            x-codeSamples:
                - lang: cURL
                  label: 'get dataset'
                  source: |
                      curl --location 'https://example-cat.com/iudx/cat/v1/internal/ui/dataset'
        post:
            tags:
                - Mlayer - Dataset
            parameters:
                - name: id
                  description: |
                      `id` of the dataset, whose details have to be fetched
                  schema:
                      type: string
                  in: query
                  required: true
            operationId: update-domain
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForGettingDatasetResources'
                    description: Successfully inserted
            description: Fetches the dataset details of a particular dataset using dataset_id.
            x-codeSamples:
                - lang: cURL
                  label: 'post dataset'
                  source: |
                      curl --location --request POST 'https://example-cat.com/iudx/cat/v1/internal/ui/dataset?id=datakaveri.org%2Fb8bd3e3f39615c8ec96722131ae95056b5938f2f%2Frs.iudx.io%2Fpune-env-aqm'

    /internal/ui/popularDatasets:
        get:
            tags:
                - MLayer
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseForPopularDatasets'
                    description: Success
            operationId: UI-popularDatasets
            description: >
                A catalogue API to get data for the landing page, which will be reflected on the catalogue UI.
                <br>
                **Instances (4)** - On sorting alphabetically, First four instances are required.
                <br>
                **Featured Datasets (6)** - (Views) Based on the count of views sort top 6 records.
                <br>
                **latest dataset (6)** - (itemCreatedAt) Dataset which was recently added, top 6 records.
            x-codeSamples:
                - lang: cURL
                  label: 'get popularDatasets'
                  source: |
                      curl --location 'https://example-cat.com/iudx/cat/v1/internal/ui/popularDatasets'

    /nlpsearch:
        description: >
            NLP Search is used a for a text based search to discover resources and resource groups on Data Exchange Catalogue Server.
        get:
            tags:
                - NLP
            parameters:
                - name: q
                  description: An English sentence
                  schema:
                      type: string
                  in: query
                  required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForNlpSearch'
                    description: Bad Request
            operationId: NLP-search
            x-codeSamples:
                - lang: cURL
                  label: 'search'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/nlpsearch?q=where can I halt near chandigarh'


components:
    schemas:
        exampleEntityWoID:
            title: Root Type for exampleEntityWoID
            description: An example entity without ID (For first time onboarding)
            type: object
            properties:
                '@context':
                    description: 'JSON-LD context. Default is https://voc.iudx.org.in.'
                    type: string
                name:
                    type: string
                type:
                    description: >
                        JSON-LD type. Must contain the uri of one of the
                        [IUDXEntity](https://voc.iudx.org.in/IUDXEntity) subclasses. May additionally contain
                        a data model uri which can be found [here](https://voc.iudx.org.in/) in the
                        "Data-Models" tab.
                    type: array
                    items:
                        type: string
            example:
              {
                  "@context": "https://voc.iudx.org.in/",
                  "type": [
                      "iudx:Resource",
                      "iudx:EnvAQM"
                  ],
                  "id": "<some_item_id>",
                  "description": "Description for pune Point of interest",
                  "tags": [
                      "environment",
                      " air quality",
                      " climate",
                      " noise",
                      " light",
                      " uv"
                  ],
                  "provider": "<some_provider_id>",
                  "itemStatus": "ACTIVE",
                  "deviceId": "b3ec32ff-fa7d-64fa-c0af-272e25d314e9",
                  "resourceGroup": "<some_provider_id>/rs.iudx.io/pune-point-of-interests",
                  "location": {
                      "type": "Place",
                      "address": "ABD area, Pune",
                      "geometry": {
                          "coordinates": [
                              73.874537,
                              18.528311
                          ],
                          "type": "Point"
                      }
                  },
                  "deviceModel": {
                      "brandName": "Climo",
                      "modelName": "Bosch-Climo",
                      "modelURL": "http://boschclimo.com"
                  },
                  "name": "<some_item_name>"
              }

        exapmleEntityWId:
            title: payload for update item with ID
            description: payload for update item with ID
            required:
                - type
                - name
                - id
                - tags
                - provider
                - resourceGroup
            type: object
            properties:
                '@context':
                    type: string
                type:
                    type: array
                    items:
                        type: string
                id:
                    type: string
                name:
                    type: string
                description:
                    type: string
                tags:
                    type: array
                    items:
                        type: string
                provider:
                    type: string
                itemStatus:
                    type: string
                deviceId:
                    type: string
                resourceGroup:
                    type: string
                location:
                    type: array
                    items:
                        type: string
                deviceModel:
                    type: array
                    items:
                        type: string
            example:
              {
                  "@context": "https://voc.iudx.org.in/",
                  "type": [
                      "iudx:Resource",
                      "iudx:EnvAQM"
                  ],
                  "id": "<some_item_id>",
                  "name": "<some_item_name>",
                  "description": "Description for Bosch-Climo AQM resource 28",
                  "tags": [
                      "New Tag, aqm,flood.test"
                  ],
                  "provider": "<some_provider_id>",
                  "itemStatus": "ACTIVE",
                  "deviceId": "b3ec32ff-fa7d-64fa-c0af-272e25d314e9",
                  "resourceGroup": "<some_provider_id>/rs.iudx.io/pune-point-of-interests",
                  "location": {
                      "type": "Place",
                      "address": "ABD area, Pune",
                      "geometry": {
                          "coordinates": [
                              73.874537,
                              18.528311
                          ],
                          "type": "Point"
                      }
                  },
                  "deviceModel": {
                      "brandName": "Climo",
                      "modelName": "Bosch-Climo",
                      "modelURL": "http://boschclimo.com"
                  }
              }
        successResponseWithObjects:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
                detail:
                    description: Detailed description of the type or response
                    type: string
                type:
                    description: >
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
            example:
                totalHits: 10
                results:
                    - {}
                type: 'urn:dx:cat:Success'
                title: Success

        successResponseForDeleteRatingObject:
            title: Success response for delete rating object
            description: Example response for delete rating object
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "b8e43a3895373412725cd557730bcf8c6c60019b8092761a66248a927784cfbe"
                      }
                  ]
              }

        successResponseForUIProvider:
            title: Response for list of providers
            description: Example success response for the User Interface Provider with ID
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 10,
                  "results": [
                      {
                          "description": "UI Test Provider-other",
                          "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f"
                      }
                  ]
              }

        listTypesSuccessResponse:
            title: Response for list with instance type
            description: Example response for list types
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 5,
                  "results": [
                      "10",
                      "pune",
                      "stqc",
                      "surat"
                  ]
              }

        successResponseForGeoLocations:
            title: Response for get geolocations
            description: Example response for a geocoding API
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 3,
                  "results": [
                      {
                          "name": "Mallesvaram",
                          "country": "India",
                          "region": "Karnataka",
                          "county": "Bangalore",
                          "locality": "Bangalore",
                          "borough": "West Bangalore",
                          "bbox": [
                              77.563072,
                              12.968362,
                              77.573072,
                              12.978362
                          ]
                      }
                  ]
              }
        successResponseForCreatingInstance:
            title: Response for creating an instance
            description: Example success response for creating the given instance
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "191e35e3-99c2-43a5-ba8d-811a756b08de",
                          "detail": "Instance created Sucesssfully"
                      }
                  ]
              }
        successResponseForGetInstance:
            title: Response for getting instance
            description: Example success response for getting DX Catalogue instances
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 9,
                  "results": [
                      "10",
                      "abcd",
                      "bengaluru",
                      "mumbai",
                      "poone",
                      "pune",
                      "stqc",
                      "surat"
                  ]
              }
        successResponseForUpdatingInstance:
            title: Response for updating an instance
            description: Example success response for updating the given instance
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "191e35e3-99c2-43a5-ba8d-811a756b08de",
                          "detail": "Instance Updated Successfully"
                      }
                  ]
              }

        successResponseForGettingInstance:
            title: Response for getting an instance
            description: Example success response for getting instance
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 1,
                  "results": [
                      {
                          "cover": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpeg",
                          "instanceId": "191e35e3-99c2-43a5-ba8d-811a756b08de",
                          "name": "lucknow",
                          "icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpeg",
                          "logo": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpeg"
                      }
                  ]
              }

        successResponseForDeletingInstance:
            title: Response for deleting an instance
            description: Example success response for deleting instance
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "191e35e3-99c2-43a5-ba8d-811a756b08de",
                          "detail": "Instance deleted Successfully"
                      }
                  ]
              }

        successResponseForCreatingDomain:
            title: Response for creating a domain
            description: Example success response for creating a domain
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "3d73067f-2855-4155-b918-14d621b7a576",
                          "detail": "domain Created Successfully"
                      }
                  ]
              }

        successResponseForUpdatingDomain:
            title: Response for updating a domain
            description: Example success response for updating a domain
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "3d73067f-2855-4155-b918-14d621b7a576",
                          "detail": "Domain Updated Successfully"
                      }
                  ]
              }

        successResponseForGettingDomain:
            title: Response for getting a domain
            description: Example success response for getting a domain
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 2,
                  "results": [
                      {
                          "icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/environment.png",
                          "name": "environment",
                          "description": "Data Models that pertain to environment domain",
                          "label": "Environment",
                          "domainId": "143db678-0816-4bb5-999d-b62ac0ca1b4b"
                      },
                      {
                          "icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.jpeg",
                          "name": "civic",
                          "description": "Data Models that pertain to civic domain",
                          "label": "Civic",
                          "domainId": "3d73067f-2855-4155-b918-14d621b7a576"
                      }
                  ]
              }

        successResponseForDeletingDomain:
            title: Response for deleting a domain
            description: Example success response for deleting a domain
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "3d73067f-2855-4155-b918-14d621b7a576",
                          "detail": "Domain deleted Successfully"
                      }
                  ]
              }



        successResponseGetRating:
            title: Success response for get rating
            description: Example response for get ratings
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 1,
                  "results": [
                      {
                          "rating": 4.8,
                          "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta"
                      }
                  ]
              }

        successResponseCreateInstance:
            title: Response for list with instance type
            description: Example response for list types
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered
                    type: string
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "results": [
                      {
                          "id": "Bengaluru",
                          "method": "insert",
                          "title": "urn:dx:cat:Success"
                      }
                  ]
              }

        successResponseForDeleteInstance:
            title: Response for list with instance type
            description: Example response for list types
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered
                    type: string
                title:
                    description: A human readable title to the message response
                    type: string
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "Bengaluru",
                          "method": "delete",
                          "title": "urn:dx:cat:Success"
                      }
                  ]
              }

        successResponseForUpdateRating:
            title: Response for update rating
            description: Example response for consumer update rating
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered
                    type: string
                title:
                    description: A human readable title to the message response
                    type: string
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "b8e43a3895373412725cd557730bcf8c6c60019b8092761a66248a927784cfbe"
                      }
                  ]
              }

        successResponseForConsumerRating:
            title: Response for list with instance type
            description: Example response for list types
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered
                    type: string
                title:
                    description: A human readable title to the message response
                    type: string
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "id": "b8e43a3895373412725cd557730bcf8c6c60019b8092761a66248a927784cfbe",
                          "method": "insert",
                          "title": "urn:dx:cat:Success"
                      }
                  ]
              }
        successResponseForRelationship:
            title: Response for relationship search
            description: Given the type of relationship is Provider mentioned in query param
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 1,
                  "results": [
                      {
                          "@context": "https://voc.iudx.org.in/",
                          "type": [
                              "iudx:Provider"
                          ],
                          "id": "datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc",
                          "name": "testProvider",
                          "description": "Test Provider",
                          "providerOrg": {
                              "name": "testorg",
                              "additionalInfoURL": "https://test.in",
                              "location": {
                                  "type": "Place",
                                  "address": "bangalore",
                                  "geometry": {
                                      "type": "Point",
                                      "coordinates": [
                                          75.92,
                                          14.5
                                      ]
                                  }
                              }
                          }
                      }
                  ]
              }

        successResponseForGettingGeoquery:
            title: Response for getting dataset locations.
            description: Example success response for getting locations
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 3,
                  "results": [
                      {
                          "instance": "pune",
                          "location": {
                              "address": "Agra",
                              "type": "Place"
                          },
                          "label": "Civic Issues Reported from Swachhata App in Agra city",
                          "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app",
                          "doc_id": "29JqFYUBeAMS8LEaZWtM"
                      }
                  ]
              }

        successResponseForGettingDatasets:
            title: Response for getting dataset locations.
            description: Example success response for getting datasets
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "totalHits": 191,
                  "results": [
                      {
                          "instance": "pune",
                          "provider": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f",
                          "label": "Civic Issues Reported from Swachhata App in Agra city",
                          "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app",
                          "accessPolicy": "SECURE",
                          "tags": [
                              "swachhata",
                              "complaints",
                              "reporting",
                              "issue"
                          ],
                          "icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/pune.jpg",
                          "providerDescription": "UI Test Provider-other",
                          "totalResources": 1
                      }
                  ]
              }

        successResponseForGettingDatasetResources:
            title: Response for getting dataset locations based on the dataset_id.
            description: Example success response for getting datasets based on dataset_id
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": [
                      {
                          "dataset": {
                              "provider": {
                                  "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f",
                                  "description": "UI Test Provider-other"
                              },
                              "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-env-aqm",
                              "label": "Environment",
                              "description": "Publishes realtime information of air pollutants from AQM sensors/ devices deployed in Pune city. It gives average values of air pollutant measures  like carbon monoxide, nitrogen dioxide, ozone, particulate matter etc., and also the associated environmental factors like temperature, humidity, illuminance over an time interval of 15 minutes. More details on the type of pollutant measured and units of measurement can be seen in the Data Descriptor.",
                              "accessPolicy": "OPEN",
                              "instance": "pune",
                              "dataSample": {
                                  "uv": {
                                      "avgOverTime": 0.81
                                  }
                              },
                              "dataSampleFile": [
                                  {
                                      "relationType": "REL_FILE",
                                      "hasObject": "https://fs-sample-file-bucket.s3.ap-south-1.amazonaws.com/public-access/pune/pune-env-aqm.json",
                                      "name": "Pune air quality monitoring data sample",
                                      "description": "Sample file for Air quality monitoring devices/sensors in Pune city"
                                  }
                              ],
                              "dataQualityFile": [
                                  {
                                      "relationType": "REL_FILE",
                                      "hasObject": "https://fs-sample-file-bucket.s3.ap-south-1.amazonaws.com/public-access/pune/DataQuality/puneAQM_Jan22Feb22_DQReport.pdf",
                                      "name": "Pune AQM Data Quality Report Jan-Feb2022",
                                      "description": "Data quality report file for Air quality monitoring devices/sensors in Pune city for the time range between Jan-Feb2022."
                                  }
                              ],
                              "dataDescriptor": {
                                  "uv": {
                                      "description": "Describes instantaneous and/or aggregated values for Ultraviolet (UV) radiation.",
                                      "type": [
                                          "TimeSeriesAggregation"
                                      ],
                                      "avgOverTime": {
                                          "dataSchema": "iudx:Number",
                                          "unitCode": "C62",
                                          "description": "Average value of UV radiation for the last 15 minutes",
                                          "type": [
                                              "ValueDescriptor"
                                          ]
                                      }
                                  },
                                  "schema": "https://voc.iudx.org.in/EnvAQM",
                                  "totalResources": 1,
                                  "instance_icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/pune.jpg"
                              },
                              "resource": [
                                  {
                                      "resourceId": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-env-aqm/c37c6979-6802-4a1c-c852-609b7706f5ba",
                                      "label": "Environment",
                                      "description": "Air quality monitoring devices (Bosch-Climo) in Pune city.",
                                      "dataSample": null,
                                      "dataDescriptor": null,
                                      "resourceType": null
                                  }
                              ]
                          }
                      }
                  ]
              }
        successResponseForPopularDatasets:
            title: Response for getting dataset locations.
            description: Example success response for getting datasets
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "Success",
                  "results": {
                      "totalInstance": 4,
                      "totalDomain": 1,
                      "totalPublishers": 10,
                      "totalDatasets": 191,
                      "totalResources": 994,
                      "domains": [
                          {
                              "icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/environment.png",
                              "name": "environment",
                              "description": "Data Models that pertain to environment domain",
                              "label": "Environment",
                              "domainId": "143db678-0816-4bb5-999d-b62ac0ca1b4b"
                          }
                      ],
                      "instance": [
                          {
                              "cover": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/agartala.jpg",
                              "name": "agartala",
                              "icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/agartala.jpg"
                          }
                      ],
                      "featuredDataset": [
                          {
                              "itemCreatedAt": "2020-09-28T08:07:06+0530",
                              "instance": "surat",
                              "provider": "Administrator of the IUDX platform",
                              "description": "Realtime information for tracking public transit buses in Surat city.",
                              "label": "Surat Realtime Bus Position Info",
                              "accessPolicy": "SECURE",
                              "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information",
                              "type": [
                                  "iudx:ResourceGroup",
                                  "iudx:TransitManagement"
                              ],
                              "totalResources": 1,
                              "icon": "https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/surat.jpeg"
                          }
                      ],
                      "latestDataset": [
                          {
                              "itemCreatedAt": "2023-03-09T09:08:20+0530",
                              "instance": "surveyofindia",
                              "provider": "Administrator of the IUDX platform",
                              "description": "GIS Layers for roads, railways, water bodies and streams, vegetation and surveyed buildings in Bangalore",
                              "label": "Features of interest in Bangalore",
                              "id": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/geoserver.iudx.io/bangalore_features_of_interest",
                              "accessPolicy": "SECURE",
                              "type": [
                                  "iudx:ResourceGroup",
                                  "iudx:FeaturesOfInterest"
                              ],
                              "totalResources": 6,
                              "icon": null
                          }
                      ]
                  }
              }

        updateItemResponse:
            title: Response for update Item
            description: Success response for update Item with ID
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered
                    type: string
                title:
                    description: A human readable title to the message response
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "urn:dx:cat:Success",
                  "results": [
                      {
                          "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2",
                          "method": "update",
                          "title": "urn:dx:cat:Success"
                      }
                  ]
              }

        errorResponseForDiscovery:
            title: Root Type for Discovery APIs
            description: Standard Error Response for the search, count and geo queries
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                detail:
                    description: Detailed description of the type or response
                    type: string
            example:
                type: <error urn>
                title: <error title
                detail: <error detail description>



        errorResponseWithObjects:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
                detail:
                    description: Detailed description of the type or response
                    type: string
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
            example:
                totalHits: 10
                results:
                    - {}
                type: <error urn>
                title: <error title
                detail: <error detail description>

        unAuthorizedAccess:
            title: Common to unauthorized access response
            description: Response for 401 invalid token
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        Indicates that the token sent in request header is invalid
                    type: string
                title:
                    description: A human readable title to the message response
                detail:
                    description: Detailed description of the type or response
                    type: string
            example:
              {
                  "type": "urn:dx:cat:InvalidAuthorizationToken",
                  "title": "Token is invalid",
                  "detail": "failed"
              }

        errorResponseForCreateInstance:
            title: Response for bad request
            description: Invalid id in query param
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        Indicates that the id sent in request is invalid
                    type: string
                title:
                    description: A human readable title to the message response
                detail:
                    description: Detailed description of the type or response
                    type: string
            example:
              {
                  "type": "urn:dx:cat:InvalidSyntax",
                  "title": "Invalid Syntax",
                  "detail": "id not present in the request"
              }

        errorResponseForDeleteInstance:
            title: Response for bad request
            description: Invalid item type in the given request
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        Indicates that the item type sent in request path param is invalid
                    type: string
                title:
                    description: A human readable title to the message response
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:ItemNotFound",
                  "title": "Item is not found",
                  "results": [
                      {
                          "id": "Abcd",
                          "method": "delete",
                          "title": "failed",
                          "detail": "Fail: Doc doesn't exist, can't delete"
                      }
                  ]
              }

        errorResponseForRelationship:
            title: Indicates bad request
            description: Error response due to invalid query param
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        Error response due to invalid query param in the request
                    type: string
                title:
                    description: A human readable title to the message response

        errorResponseForConsumerRating:
            title: Response for bad request
            description: Invalid item type in the given request
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        Indicates that the item type sent in request path param is invalid
                    type: string
                title:
                    description: A human readable title to the message response
                detail:
                    description: Detailed description of the type or response
                    type: string

        errorResponseForUpdateRating:
            title: Response for bad request
            description: Invalid item type in the given request
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        Indicates that the item type sent in request path param is invalid
                    type: string
                title:
                    description: A human readable title to the message response
            example:
              {
                  "type": "urn:dx:cat:InvalidSchema",
                  "title": "Invalid Schema"
              }

        errorResponseForCreatingInstance:
            title: Example Response for creating or updating an instance or a domain or a geoquery
            description: Invalid or missing payload field in the given request
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        Indicates Invalid or missing payload field in the given request
                    type: string
                title:
                    description: A human readable title to the message response
            example:
              {
                  "type": "urn:dx:cat:InvalidSchema",
                  "title": "Invalid Schema",
                  "detail": "The Schema of requested body is invalid."
              }




        listTypesErrorResponse:
            title: Response for bad request
            description: Invalid item type in the given request
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        Indicates that the item type sent in request path param is invalid
                    type: string
                title:
                    description: A human readable title to the message response
                detail:
                    description: Detailed description of the type or response
                    type: string
            example:
              {
                  "type": "urn:dx:cat:InvalidSyntax",
                  "title": "Invalid Syntax",
                  "detail": "Wrong Item Type"
              }


        relSearchErrorResponse:
            title: Response for bad request
            description: Invalid value in the query param
            required:
                - type
            type: object
            properties:
                type:
                    description: |
                        Indicates that the syntax in request query param is invalid
                    type: string
                title:
                    description: A human readable title to the message response
            example:
              {
                  "type": "urn:dx:cat:InvalidSyntax",
                  "title": "Invalid Syntax"
              }

        errorResponseForNlpSearch:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                detail:
                    description: Detailed description of the type or response
                    type: string
            example:
              {
                  "type": "urn:dx:cat:InvalidSyntax",
                  "title": "Invalid Syntax",
                  "detail": "Failed to find coordinates"
              }

        updateItemBadRequest:
            title: 400 Bad Request
            description: Update Item Bad Request
            required:
                - type
            type: string
            properties:
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                detail:
                    description: Detailed description of the type or response
                    type: string
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:InvalidSchema",
                  "title": "Invalid Schema",
                  "detail": "Invalid Schema",
                  "results": [ ]
              }

        updateItemNotFound:
            title: 404 Not Found
            description: Update Item Not Found
            required:
                - type
            type: string
            properties:
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered
                    type: string
                title:
                    description: A human readable title to the message response
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:ItemNotFound",
                  "title": "Item is not found",
                  "results": [
                      {
                          "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2abcdefg",
                          "method": "update",
                          "title": "failed",
                          "detail": "Fail: Doc doesn't exist, can't update"
                      }
                  ]
              }


        errorResponseForGetEntity:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:ItemNotFound",
                  "title": "error",
                  "totalHits": 0,
                  "results": [ ]
              }

        exampleRating:
            title: Root Type for exampleRating
            description: An example rating object for a resource
            type: object
            properties:
                rating:
                    type: number
                comment:
                    type: string
            example:
                rating: 4.3
                comment: some-comment

        exampleInstance:
            title: Root Type for exampleInstance
            description: An example instance object of middle layer.
            type: object
            properties:
                name:
                    type: string
                    description: name of the instance
                cover:
                    type: string
                    description: URL of the image
                icon:
                    type: string
                    description: URL of the image
                logo:
                    type: string
                    description: URL of the image
            example:
                name: lucknow
                cover: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpg'
                icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpg'
                logo: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpg'




        exampleDomain:
            title: Root Type for exampleDomain
            description: An example domain object of middle layer.
            type: object
            properties:
                description:
                    type: string
                    description: Description about the domain
                cover:
                    type: string
                    description: URL of the image
                icon:
                    type: string
                    description: type or tag of the domain
                logo:
                    type: string
                    description: Domain name
            example:
                description: Data Models that pertain to civic domain
                icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.png'
                label: Civic
                name: civic

        exampleReqBodyMapView:
            title: Root Type for exampleReqBodyMapView
            description: An example of requeted body of geoquery
            required:
                - type
            type: object
            properties:
                id:
                    type: array
                    items:
                        type: string
                    description: dataset_id's of resource group whose location is needed
                instance:
                    type: string
                    description: name of the city/town from where the dataset belongs to
            example:
              {
                  "id": [ "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/faridabad-camera-feeds",
                          "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app",
                          "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/chennai-bike-docking-locations" ],
                  "instance": "pune"
              }


tags:
    -
        name: Entity
        description: |
            Manage catalogue entities and perform Create/Update/Read/Delete operations on them.
            These apis are intended to be used by DX(Data Exchange) Data *Providers*.
        x-displayName: Entity
    -
        name: Discovery
        description: >
            Discovery DX Entities using a rich discovery api supporting property, text and geo-based
            queries.
            
            These apis are intended to be used by DX(Data Exchange) Data *Consumers*.
            
            <br>
            Geo-Query APIs list the location of the dataset ids' given in the request body of a particular instance
        x-displayName: Discovery
    -
        name: List
        description: |
            List DX Entities of a certain type.
            These apis are intended to be used by User Interfaces.
        x-displayName: List
    -
        name: Relationship
        description: |
            Discovery of entities through their relationships.
            These apis are intended to be used by DX(Data Exchange) Data *Consumers*.
        x-displayName: Relationship
    -
        name: Administrator
        description: |
            Catalogue administrator specific apis.
        x-displayName: Administrator
    -
        name: Consumer
        description: |
            Catalogue consumer specific apis.
        x-displayName: Consumer

    -
        name: MLayer
        description: >
            Catalogue middle layer specific APIs. 
            <br>
            These apis consist of providers, geo-query and overview APIs
        x-displayName: MLayer
    -
        name: Mlayer - Instance
        description: >
            Catalogue middle layer specific APIs. 
            Instance refers to the name of the city/location.
        x-displayName: Mlayer - Instance
    -
        name: Mlayer - Domain
        description: >
            Catalogue middle layer specific APIs. 
            Catalogue has data-domain models that describes each of the domains.
        x-displayName: Mlayer - Domain
    -
        name: Mlayer - Dataset
        description: >
            Catalogue middle layer specific API fetches all the datasets that belong to the Data Exchange
        x-displayName: Mlayer - Dataset
    -
        name: NLP
        description: |
            Natural Language Processing API is used a for a text based search to discover resources and resource groups on the catalogue server
        x-displayName: NLP API

